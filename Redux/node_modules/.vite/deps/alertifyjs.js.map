{
  "version": 3,
  "sources": ["../../alertifyjs/build/alertify.js"],
  "sourcesContent": ["/**\r\n * alertifyjs 1.14.0 http://alertifyjs.com\r\n * AlertifyJS is a javascript framework for developing pretty browser dialogs and notifications.\r\n * Copyright 2024 Mohammad Younes <Mohammad@alertifyjs.com> (http://alertifyjs.com) \r\n * Licensed under GPL 3 <https://opensource.org/licenses/gpl-3.0>*/\r\n( function ( window ) {\r\n    'use strict';\r\n    var NOT_DISABLED_NOT_RESET = ':not(:disabled):not(.ajs-reset)';\r\n    /**\r\n     * Keys enum\r\n     * @type {Object}\r\n     */\r\n    var keys = {\r\n        ENTER: 13,\r\n        ESC: 27,\r\n        F1: 112,\r\n        F12: 123,\r\n        LEFT: 37,\r\n        RIGHT: 39,\r\n        TAB: 9\r\n    };\r\n    /**\r\n     * Default options \r\n     * @type {Object}\r\n     */\r\n    var defaults = {\r\n        autoReset:true,\r\n        basic:false,\r\n        closable:true,\r\n        closableByDimmer:true,\r\n        invokeOnCloseOff:false,\r\n        frameless:false,\r\n        defaultFocusOff:false,\r\n        maintainFocus:true, //global default not per instance, applies to all dialogs\r\n        maximizable:true,\r\n        modal:true,\r\n        movable:true,\r\n        moveBounded:false,\r\n        overflow:true,\r\n        padding: true,\r\n        pinnable:true,\r\n        pinned:true,\r\n        preventBodyShift:false, //global default not per instance, applies to all dialogs\r\n        resizable:true,\r\n        startMaximized:false,\r\n        transition:'pulse',\r\n        transitionOff:false,\r\n        tabbable:['button', '[href]', 'input', 'select', 'textarea', '[tabindex]:not([tabindex^=\"-\"])'+NOT_DISABLED_NOT_RESET].join(NOT_DISABLED_NOT_RESET+','),//global\r\n        notifier:{\r\n            delay:5,\r\n            position:'bottom-right',\r\n            closeButton:false,\r\n            classes: {\r\n                base: 'alertify-notifier',\r\n                prefix:'ajs-',\r\n                message: 'ajs-message',\r\n                top: 'ajs-top',\r\n                right: 'ajs-right',\r\n                bottom: 'ajs-bottom',\r\n                left: 'ajs-left',\r\n                center: 'ajs-center',\r\n                visible: 'ajs-visible',\r\n                hidden: 'ajs-hidden',\r\n                close: 'ajs-close'\r\n            }\r\n        },\r\n        glossary:{\r\n            title:'AlertifyJS',\r\n            ok: 'OK',\r\n            cancel: 'Cancel',\r\n            acccpt: 'Accept',\r\n            deny: 'Deny',\r\n            confirm: 'Confirm',\r\n            decline: 'Decline',\r\n            close: 'Close',\r\n            maximize: 'Maximize',\r\n            restore: 'Restore',\r\n        },\r\n        theme:{\r\n            input:'ajs-input',\r\n            ok:'ajs-ok',\r\n            cancel:'ajs-cancel',\r\n        },\r\n        hooks:{\r\n            preinit:function(){},\r\n            postinit:function(){}\r\n        }\r\n    };\r\n    \r\n    //holds open dialogs instances\r\n    var openDialogs = [];\r\n\r\n    /**\r\n     * [Helper]  Adds the specified class(es) to the element.\r\n     *\r\n     * @element {node}      The element\r\n     * @className {string}  One or more space-separated classes to be added to the class attribute of the element.\r\n     * \r\n     * @return {undefined}\r\n     */\r\n    function addClass(element,classNames){\r\n        element.className += ' ' + classNames;\r\n    }\r\n    \r\n    /**\r\n     * [Helper]  Removes the specified class(es) from the element.\r\n     *\r\n     * @element {node}      The element\r\n     * @className {string}  One or more space-separated classes to be removed from the class attribute of the element.\r\n     * \r\n     * @return {undefined}\r\n     */\r\n    function removeClass(element, classNames) {\r\n        var original = element.className.split(' ');\r\n        var toBeRemoved = classNames.split(' ');\r\n        for (var x = 0; x < toBeRemoved.length; x += 1) {\r\n            var index = original.indexOf(toBeRemoved[x]);\r\n            if (index > -1){\r\n                original.splice(index,1);\r\n            }\r\n        }\r\n        element.className = original.join(' ');\r\n    }\r\n\r\n    /**\r\n     * [Helper]  Checks if the document is RTL\r\n     *\r\n     * @return {Boolean} True if the document is RTL, false otherwise.\r\n     */\r\n    function isRightToLeft(){\r\n        return window.getComputedStyle(document.body).direction === 'rtl';\r\n    }\r\n    /**\r\n     * [Helper]  Get the document current scrollTop\r\n     *\r\n     * @return {Number} current document scrollTop value\r\n     */\r\n    function getScrollTop(){\r\n        return ((document.documentElement && document.documentElement.scrollTop) || document.body.scrollTop);\r\n    }\r\n\r\n    /**\r\n     * [Helper]  Get the document current scrollLeft\r\n     *\r\n     * @return {Number} current document scrollLeft value\r\n     */\r\n    function getScrollLeft(){\r\n        return ((document.documentElement && document.documentElement.scrollLeft) || document.body.scrollLeft);\r\n    }\r\n\r\n    /**\r\n    * Helper: clear contents\r\n    *\r\n    */\r\n    function clearContents(element){\r\n        while (element.lastChild) {\r\n            element.removeChild(element.lastChild);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * detects strings, checks for both string and String instances\r\n     * this is unlike typeof(x) === 'string' which only accepts primitive strings\r\n     *\r\n     */\r\n    function isString(thing) {\r\n        return Object.prototype.toString.call(thing) === '[object String]';\r\n    }\r\n\r\n    /**\r\n     * Extends a given prototype by merging properties from base into sub.\r\n     *\r\n     * @sub {Object} sub The prototype being overwritten.\r\n     * @base {Object} base The prototype being written.\r\n     *\r\n     * @return {Object} The extended prototype.\r\n     */\r\n    function copy(src) {\r\n        if(null === src){\r\n            return src;\r\n        }\r\n        var cpy;\r\n        if(Array.isArray(src)){\r\n            cpy = [];\r\n            for(var x=0;x<src.length;x+=1){\r\n                cpy.push(copy(src[x]));\r\n            }\r\n            return cpy;\r\n        }\r\n      \r\n        if(src instanceof Date){\r\n            return new Date(src.getTime());\r\n        }\r\n      \r\n        if(src instanceof RegExp){\r\n            cpy = new RegExp(src.source);\r\n            cpy.global = src.global;\r\n            cpy.ignoreCase = src.ignoreCase;\r\n            cpy.multiline = src.multiline;\r\n            cpy.lastIndex = src.lastIndex;\r\n            return cpy;\r\n        }\r\n        \r\n        if(typeof src === 'object'){\r\n            cpy = {};\r\n            // copy dialog pototype over definition.\r\n            for (var prop in src) {\r\n                if (src.hasOwnProperty(prop)) {\r\n                    cpy[prop] = copy(src[prop]);\r\n                }\r\n            }\r\n            return cpy;\r\n        }\r\n        return src;\r\n    }\r\n    /**\r\n      * Helper: destruct the dialog\r\n      *\r\n      */\r\n    function destruct(instance, initialize){\r\n        if(instance.elements){\r\n            //delete the dom and it's references.\r\n            var root = instance.elements.root;\r\n            root.parentNode.removeChild(root);\r\n            delete instance.elements;\r\n            //copy back initial settings.\r\n            instance.settings = copy(instance.__settings);\r\n            //re-reference init function.\r\n            instance.__init = initialize;\r\n            //delete __internal variable to allow re-initialization.\r\n            delete instance.__internal;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Test to check if passive event listeners are supported.\r\n     */\r\n    var IsPassiveSupported = false;\r\n    try {\r\n        var options = Object.defineProperty({}, 'passive', {\r\n            get: function () {\r\n                IsPassiveSupported = true;\r\n            }\r\n        });\r\n        window.addEventListener('test', options, options);\r\n        window.removeEventListener('test', options, options);\r\n    } catch (e) {}\r\n\r\n     /**\r\n     * Removes an event listener\r\n     *\r\n     * @param {HTMLElement} el The EventTarget to register the listenr on.\r\n     * @param {string} event The event type to listen for.\r\n     * @param {Function} handler The function to handle the event.\r\n     * @param {boolean} useCapture Specifices if the event to be dispatched to the registered listener before being dispatched to any EventTarget beneath it in the DOM tree.\r\n     * @param {boolean} passive A Boolean which, if true, indicates that the function specified by listener will never call preventDefault().\r\n     */\r\n    var on = function (el, event, fn, useCapture, passive) {\r\n        el.addEventListener(event, fn, IsPassiveSupported ? { capture: useCapture, passive: passive } : useCapture === true);\r\n    };\r\n\r\n    /**\r\n     * Removes an event listener\r\n     *\r\n     * @param {HTMLElement} el The EventTarget to unregister the listenr from.\r\n     * @param {string} event The event type to remove.\r\n     * @param {Function} fn The event handler to remove.\r\n     * @param {boolean} useCapture Specifices if the event to be dispatched to the registered listener before being dispatched to any EventTarget beneath it in the DOM tree.\r\n     * @param {boolean} passive A Boolean which, if true, indicates that the function specified by listener will never call preventDefault().\r\n     */\r\n    var off = function (el, event, fn, useCapture, passive) {\r\n        el.removeEventListener(event, fn, IsPassiveSupported ? { capture: useCapture, passive: passive } : useCapture === true);\r\n    };\r\n\r\n    /**\r\n     * Prevent default event from firing\r\n     *\r\n     * @param  {Event} event Event object\r\n     * @return {undefined}\r\n\r\n    function prevent ( event ) {\r\n        if ( event ) {\r\n            if ( event.preventDefault ) {\r\n                event.preventDefault();\r\n            } else {\r\n                event.returnValue = false;\r\n            }\r\n        }\r\n    }\r\n    */\r\n    var transition = (function () {\r\n        var t, type;\r\n        var supported = false;\r\n        var transitions = {\r\n            'animation'        : 'animationend',\r\n            'OAnimation'       : 'oAnimationEnd oanimationend',\r\n            'msAnimation'      : 'MSAnimationEnd',\r\n            'MozAnimation'     : 'animationend',\r\n            'WebkitAnimation'  : 'webkitAnimationEnd'\r\n        };\r\n\r\n        for (t in transitions) {\r\n            if (document.documentElement.style[t] !== undefined) {\r\n                type = transitions[t];\r\n                supported = true;\r\n                break;\r\n            }\r\n        }\r\n\r\n        return {\r\n            type: type,\r\n            supported: supported\r\n        };\r\n    }());\r\n\r\n    /**\r\n    * Creates event handler delegate that sends the instance as last argument.\r\n    * \r\n    * @return {Function}    a function wrapper which sends the instance as last argument.\r\n    */\r\n    function delegate(context, method) {\r\n        return function () {\r\n            if (arguments.length > 0) {\r\n                var args = [];\r\n                for (var x = 0; x < arguments.length; x += 1) {\r\n                    args.push(arguments[x]);\r\n                }\r\n                args.push(context);\r\n                return method.apply(context, args);\r\n            }\r\n            return method.apply(context, [null, context]);\r\n        };\r\n    }\r\n    /**\r\n    * Helper for creating a dialog close event.\r\n    * \r\n    * @return {object}\r\n    */\r\n    function createCloseEvent(index, button) {\r\n        return {\r\n            index: index,\r\n            button: button,\r\n            cancel: false\r\n        };\r\n    }\r\n    /**\r\n    * Helper for dispatching events.\r\n    *\r\n    * @param  {string} evenType The type of the event to disptach.\r\n    * @param  {object} instance The dialog instance disptaching the event.\r\n    *\r\n    * @return   {any}   The result of the invoked function.\r\n    */\r\n    function dispatchEvent(eventType, instance) {\r\n        if ( typeof instance.get(eventType) === 'function' ) {\r\n            return instance.get(eventType).call(instance);\r\n        }\r\n    }\r\n\r\n\r\n    /**\r\n     * Super class for all dialogs\r\n     *\r\n     * @return {Object}\t\tbase dialog prototype\r\n     */\r\n    var dialog = (function () {\r\n        var //holds the list of used keys.\r\n            usedKeys = [],\r\n            //dummy variable, used to trigger dom reflow.\r\n            reflow = null,\r\n            //holds body tab index in case it has any.\r\n            tabindex = false,\r\n            //condition for detecting safari\r\n            isSafari = window.navigator.userAgent.indexOf('Safari') > -1 && window.navigator.userAgent.indexOf('Chrome') < 0,\r\n            //dialog building blocks\r\n            templates = {\r\n                dimmer:'<div class=\"ajs-dimmer\"></div>',\r\n                /*tab index required to fire click event before body focus*/\r\n                modal: '<div class=\"ajs-modal\" tabindex=\"0\"></div>',\r\n                dialog: '<div class=\"ajs-dialog\" tabindex=\"0\"></div>',\r\n                reset: '<button class=\"ajs-reset\"></button>',\r\n                commands: '<div class=\"ajs-commands\"><button class=\"ajs-pin\"></button><button class=\"ajs-maximize\"></button><button class=\"ajs-close\"></button></div>',\r\n                header: '<div class=\"ajs-header\"></div>',\r\n                body: '<div class=\"ajs-body\"></div>',\r\n                content: '<div class=\"ajs-content\"></div>',\r\n                footer: '<div class=\"ajs-footer\"></div>',\r\n                buttons: { primary: '<div class=\"ajs-primary ajs-buttons\"></div>', auxiliary: '<div class=\"ajs-auxiliary ajs-buttons\"></div>' },\r\n                button: '<button class=\"ajs-button\"></button>',\r\n                resizeHandle: '<div class=\"ajs-handle\"></div>',\r\n            },\r\n            //common class names\r\n            classes = {\r\n                animationIn: 'ajs-in',\r\n                animationOut: 'ajs-out',\r\n                base: 'alertify',\r\n                basic:'ajs-basic',\r\n                capture: 'ajs-capture',\r\n                closable:'ajs-closable',\r\n                fixed: 'ajs-fixed',\r\n                frameless:'ajs-frameless',\r\n                hidden: 'ajs-hidden',\r\n                maximize: 'ajs-maximize',\r\n                maximized: 'ajs-maximized',\r\n                maximizable:'ajs-maximizable',\r\n                modeless: 'ajs-modeless',\r\n                movable: 'ajs-movable',\r\n                noSelection: 'ajs-no-selection',\r\n                noOverflow: 'ajs-no-overflow',\r\n                noPadding:'ajs-no-padding',\r\n                pin:'ajs-pin',\r\n                pinnable:'ajs-pinnable',\r\n                prefix: 'ajs-',\r\n                resizable: 'ajs-resizable',\r\n                restore: 'ajs-restore',\r\n                shake:'ajs-shake',\r\n                unpinned:'ajs-unpinned',\r\n                noTransition:'ajs-no-transition'\r\n            };\r\n\r\n        /**\r\n         * Helper: initializes the dialog instance\r\n         * \r\n         * @return\t{Number}\tThe total count of currently open modals.\r\n         */\r\n        function initialize(instance){\r\n            \r\n            if(!instance.__internal){\r\n                //invoke preinit global hook\r\n                alertify.defaults.hooks.preinit(instance);\r\n                //no need to expose init after this.\r\n                delete instance.__init;\r\n              \r\n                //keep a copy of initial dialog settings\r\n                if(!instance.__settings){\r\n                    instance.__settings = copy(instance.settings);\r\n                }\r\n                \r\n                //get dialog buttons/focus setup\r\n                var setup;\r\n                if(typeof instance.setup === 'function'){\r\n                    setup = instance.setup();\r\n                    setup.options = setup.options  || {};\r\n                    setup.focus = setup.focus  || {};\r\n                }else{\r\n                    setup = {\r\n                        buttons:[],\r\n                        focus:{\r\n                            element:null,\r\n                            select:false\r\n                        },\r\n                        options:{\r\n                        }\r\n                    };\r\n                }\r\n                \r\n                //initialize hooks object.\r\n                if(typeof instance.hooks !== 'object'){\r\n                    instance.hooks = {};\r\n                }\r\n\r\n                //copy buttons defintion\r\n                var buttonsDefinition = [];\r\n                if(Array.isArray(setup.buttons)){\r\n                    for(var b=0;b<setup.buttons.length;b+=1){\r\n                        var ref  = setup.buttons[b],\r\n                            cpy = {};\r\n                        for (var i in ref) {\r\n                            if (ref.hasOwnProperty(i)) {\r\n                                cpy[i] = ref[i];\r\n                            }\r\n                        }\r\n                        buttonsDefinition.push(cpy);\r\n                    }\r\n                }\r\n\r\n                var internal = instance.__internal = {\r\n                    /**\r\n                     * Flag holding the open state of the dialog\r\n                     * \r\n                     * @type {Boolean}\r\n                     */\r\n                    isOpen:false,\r\n                    /**\r\n                     * Active element is the element that will receive focus after\r\n                     * closing the dialog. It defaults as the body tag, but gets updated\r\n                     * to the last focused element before the dialog was opened.\r\n                     *\r\n                     * @type {Node}\r\n                     */\r\n                    activeElement:document.body,\r\n                    timerIn:undefined,\r\n                    timerOut:undefined,\r\n                    buttons: buttonsDefinition,\r\n                    focus: setup.focus,\r\n                    options: {\r\n                        title: undefined,\r\n                        modal: undefined,\r\n                        basic:undefined,\r\n                        frameless:undefined,\r\n                        defaultFocusOff:undefined,\r\n                        pinned: undefined,\r\n                        movable: undefined,\r\n                        moveBounded:undefined,\r\n                        resizable: undefined,\r\n                        autoReset: undefined,\r\n                        closable: undefined,\r\n                        closableByDimmer: undefined,\r\n                        invokeOnCloseOff:undefined,\r\n                        maximizable: undefined,\r\n                        startMaximized: undefined,\r\n                        pinnable: undefined,\r\n                        transition: undefined,\r\n                        transitionOff: undefined,\r\n                        padding:undefined,\r\n                        overflow:undefined,\r\n                        onshow:undefined,\r\n                        onclosing:undefined,\r\n                        onclose:undefined,\r\n                        onfocus:undefined,\r\n                        onmove:undefined,\r\n                        onmoved:undefined,\r\n                        onresize:undefined,\r\n                        onresized:undefined,\r\n                        onmaximize:undefined,\r\n                        onmaximized:undefined,\r\n                        onrestore:undefined,\r\n                        onrestored:undefined\r\n                    },\r\n                    resetHandler:undefined,\r\n                    beginMoveHandler:undefined,\r\n                    beginResizeHandler:undefined,\r\n                    bringToFrontHandler:undefined,\r\n                    modalClickHandler:undefined,\r\n                    buttonsClickHandler:undefined,\r\n                    commandsClickHandler:undefined,\r\n                    transitionInHandler:undefined,\r\n                    transitionOutHandler:undefined,\r\n                    destroy:undefined\r\n                };\r\n\r\n                var elements = {};\r\n                //root node\r\n                elements.root = document.createElement('div');\r\n                //prevent FOUC in case of async styles loading.\r\n                elements.root.style.display = 'none';\r\n                elements.root.className = classes.base + ' ' + classes.hidden + ' ';\r\n\r\n                elements.root.innerHTML = templates.dimmer + templates.modal;\r\n                \r\n                //dimmer\r\n                elements.dimmer = elements.root.firstChild;\r\n\r\n                //dialog\r\n                elements.modal = elements.root.lastChild;\r\n                elements.modal.innerHTML = templates.dialog;\r\n                elements.dialog = elements.modal.firstChild;\r\n                elements.dialog.innerHTML = templates.reset + templates.commands + templates.header + templates.body + templates.footer + templates.resizeHandle + templates.reset;\r\n\r\n                //reset links\r\n                elements.reset = [];\r\n                elements.reset.push(elements.dialog.firstChild);\r\n                elements.reset.push(elements.dialog.lastChild);\r\n                \r\n                //commands\r\n                elements.commands = {};\r\n                elements.commands.container = elements.reset[0].nextSibling;\r\n                elements.commands.pin = elements.commands.container.firstChild;\r\n                elements.commands.maximize = elements.commands.pin.nextSibling;\r\n                elements.commands.close = elements.commands.maximize.nextSibling;\r\n                \r\n                //header\r\n                elements.header = elements.commands.container.nextSibling;\r\n\r\n                //body\r\n                elements.body = elements.header.nextSibling;\r\n                elements.body.innerHTML = templates.content;\r\n                elements.content = elements.body.firstChild;\r\n\r\n                //footer\r\n                elements.footer = elements.body.nextSibling;\r\n                elements.footer.innerHTML = templates.buttons.auxiliary + templates.buttons.primary;\r\n                \r\n                //resize handle\r\n                elements.resizeHandle = elements.footer.nextSibling;\r\n\r\n                //buttons\r\n                elements.buttons = {};\r\n                elements.buttons.auxiliary = elements.footer.firstChild;\r\n                elements.buttons.primary = elements.buttons.auxiliary.nextSibling;\r\n                elements.buttons.primary.innerHTML = templates.button;\r\n                elements.buttonTemplate = elements.buttons.primary.firstChild;\r\n                //remove button template\r\n                elements.buttons.primary.removeChild(elements.buttonTemplate);\r\n                               \r\n                for(var x=0; x < instance.__internal.buttons.length; x+=1) {\r\n                    var button = instance.__internal.buttons[x];\r\n                    \r\n                    // add to the list of used keys.\r\n                    if(usedKeys.indexOf(button.key) < 0){\r\n                        usedKeys.push(button.key);\r\n                    }\r\n\r\n                    button.element = elements.buttonTemplate.cloneNode();\r\n                    button.element.innerHTML = button.text;\r\n                    if(typeof button.className === 'string' &&  button.className !== ''){\r\n                        addClass(button.element, button.className);\r\n                    }\r\n                    for(var key in button.attrs){\r\n                        if(key !== 'className' && button.attrs.hasOwnProperty(key)){\r\n                            button.element.setAttribute(key, button.attrs[key]);\r\n                        }\r\n                    }\r\n                    if(button.scope === 'auxiliary'){\r\n                        elements.buttons.auxiliary.appendChild(button.element);\r\n                    }else{\r\n                        elements.buttons.primary.appendChild(button.element);\r\n                    }\r\n                }\r\n                //make elements pubic\r\n                instance.elements = elements;\r\n                \r\n                //save event handlers delegates\r\n                internal.resetHandler = delegate(instance, onReset);\r\n                internal.beginMoveHandler = delegate(instance, beginMove);\r\n                internal.beginResizeHandler = delegate(instance, beginResize);\r\n                internal.bringToFrontHandler = delegate(instance, bringToFront);\r\n                internal.modalClickHandler = delegate(instance, modalClickHandler);\r\n                internal.buttonsClickHandler = delegate(instance, buttonsClickHandler);\r\n                internal.commandsClickHandler = delegate(instance, commandsClickHandler);\r\n                internal.transitionInHandler = delegate(instance, handleTransitionInEvent);\r\n                internal.transitionOutHandler = delegate(instance, handleTransitionOutEvent);\r\n\r\n                //settings\r\n                for(var opKey in internal.options){\r\n                    if(setup.options[opKey] !== undefined){\r\n                        // if found in user options\r\n                        instance.set(opKey, setup.options[opKey]);\r\n                    }else if(alertify.defaults.hasOwnProperty(opKey)) {\r\n                        // else if found in defaults options\r\n                        instance.set(opKey, alertify.defaults[opKey]);\r\n                    }else if(opKey === 'title' ) {\r\n                        // else if title key, use alertify.defaults.glossary\r\n                        instance.set(opKey, alertify.defaults.glossary[opKey]);\r\n                    }\r\n                }\r\n\r\n                // allow dom customization\r\n                if(typeof instance.build === 'function'){\r\n                    instance.build();\r\n                }\r\n\r\n                //invoke postinit global hook\r\n                alertify.defaults.hooks.postinit(instance);\r\n            }\r\n\r\n            //add to the end of the DOM tree.\r\n            document.body.appendChild(instance.elements.root);\r\n        }\r\n\r\n        /**\r\n         * Helper: maintains scroll position\r\n         *\r\n         */\r\n        var scrollX, scrollY;\r\n        function saveScrollPosition(){\r\n            scrollX = getScrollLeft();\r\n            scrollY = getScrollTop();\r\n        }\r\n        function restoreScrollPosition(){\r\n            window.scrollTo(scrollX, scrollY);\r\n        }\r\n\r\n        /**\r\n         * Helper: adds/removes no-overflow class from body\r\n         *\r\n         */\r\n        function ensureNoOverflow(){\r\n            var requiresNoOverflow = 0;\r\n            for(var x=0;x<openDialogs.length;x+=1){\r\n                var instance = openDialogs[x];\r\n                if(instance.isModal() || instance.isMaximized()){\r\n                    requiresNoOverflow+=1;\r\n                }\r\n            }\r\n            if(requiresNoOverflow === 0 && document.body.className.indexOf(classes.noOverflow) >= 0){\r\n                //last open modal or last maximized one\r\n                removeClass(document.body, classes.noOverflow);\r\n                preventBodyShift(false);\r\n            }else if(requiresNoOverflow > 0 && document.body.className.indexOf(classes.noOverflow) < 0){\r\n                //first open modal or first maximized one\r\n                preventBodyShift(true);\r\n                addClass(document.body, classes.noOverflow);\r\n            }\r\n        }\r\n        var top = '', topScroll = 0;\r\n        /**\r\n         * Helper: prevents body shift.\r\n         *\r\n         */\r\n        function preventBodyShift(add){\r\n            if(alertify.defaults.preventBodyShift){\r\n                if(add && document.documentElement.scrollHeight > document.documentElement.clientHeight ){//&& openDialogs[openDialogs.length-1].elements.dialog.clientHeight <= document.documentElement.clientHeight){\r\n                    topScroll = scrollY;\r\n                    top = window.getComputedStyle(document.body).top;\r\n                    addClass(document.body, classes.fixed);\r\n                    document.body.style.top = -scrollY + 'px';\r\n                } else if(!add) {\r\n                    scrollY = topScroll;\r\n                    document.body.style.top = top;\r\n                    removeClass(document.body, classes.fixed);\r\n                    restoreScrollPosition();\r\n                }\r\n            }\r\n        }\r\n\r\n        /**\r\n         * Sets the name of the transition used to show/hide the dialog\r\n         * \r\n         * @param {Object} instance The dilog instance.\r\n         *\r\n         */\r\n        function updateTransition(instance, value, oldValue){\r\n            if(isString(oldValue)){\r\n                removeClass(instance.elements.root,classes.prefix +  oldValue);\r\n            }\r\n            addClass(instance.elements.root, classes.prefix + value);\r\n            reflow = instance.elements.root.offsetWidth;\r\n        }\r\n\r\n        /**\r\n         * Toggles the dialog no transition \r\n         *\r\n         * @param {Object} instance The dilog instance.\r\n         *\r\n         * @return {undefined}\r\n         */\r\n        function updateTransitionOff(instance){\r\n            if (instance.get('transitionOff')) {\r\n                // add class\r\n                addClass(instance.elements.root, classes.noTransition);\r\n            } else {\r\n                // remove class\r\n                removeClass(instance.elements.root, classes.noTransition);\r\n            }\r\n        }\r\n\r\n        /**\r\n         * Toggles the dialog display mode\r\n         *\r\n         * @param {Object} instance The dilog instance.\r\n         *\r\n         * @return {undefined}\r\n         */\r\n        function updateDisplayMode(instance){\r\n            if(instance.get('modal')){\r\n\r\n                //make modal\r\n                removeClass(instance.elements.root, classes.modeless);\r\n\r\n                //only if open\r\n                if(instance.isOpen()){\r\n                    unbindModelessEvents(instance);\r\n\r\n                    //in case a pinned modless dialog was made modal while open.\r\n                    updateAbsPositionFix(instance);\r\n\r\n                    ensureNoOverflow();\r\n                }\r\n            }else{\r\n                //make modelss\r\n                addClass(instance.elements.root, classes.modeless);\r\n\r\n                //only if open\r\n                if(instance.isOpen()){\r\n                    bindModelessEvents(instance);\r\n\r\n                    //in case pin/unpin was called while a modal is open\r\n                    updateAbsPositionFix(instance);\r\n\r\n                    ensureNoOverflow();\r\n                }\r\n            }\r\n        }\r\n\r\n        /**\r\n         * Toggles the dialog basic view mode \r\n         *\r\n         * @param {Object} instance The dilog instance.\r\n         *\r\n         * @return {undefined}\r\n         */\r\n        function updateBasicMode(instance){\r\n            if (instance.get('basic')) {\r\n                // add class\r\n                addClass(instance.elements.root, classes.basic);\r\n            } else {\r\n                // remove class\r\n                removeClass(instance.elements.root, classes.basic);\r\n            }\r\n        }\r\n\r\n        /**\r\n         * Toggles the dialog frameless view mode \r\n         *\r\n         * @param {Object} instance The dilog instance.\r\n         *\r\n         * @return {undefined}\r\n         */\r\n        function updateFramelessMode(instance){\r\n            if (instance.get('frameless')) {\r\n                // add class\r\n                addClass(instance.elements.root, classes.frameless);\r\n            } else {\r\n                // remove class\r\n                removeClass(instance.elements.root, classes.frameless);\r\n            }\r\n        }\r\n\t\t\r\n        /**\r\n         * Helper: Brings the modeless dialog to front, attached to modeless dialogs.\r\n         *\r\n         * @param {Event} event Focus event\r\n         * @param {Object} instance The dilog instance.\r\n         *\r\n         * @return {undefined}\r\n         */\r\n        function bringToFront(event, instance){\r\n            \r\n            // Do not bring to front if preceeded by an open modal\r\n            var index = openDialogs.indexOf(instance);\r\n            for(var x=index+1;x<openDialogs.length;x+=1){\r\n                if(openDialogs[x].isModal()){\r\n                    return;\r\n                }\r\n            }\r\n\t\t\t\r\n            // Bring to front by making it the last child.\r\n            if(document.body.lastChild !== instance.elements.root){\r\n                document.body.appendChild(instance.elements.root);\r\n                //also make sure its at the end of the list\r\n                openDialogs.splice(openDialogs.indexOf(instance),1);\r\n                openDialogs.push(instance);\r\n                setFocus(instance);\r\n            }\r\n\t\t\t\r\n            return false;\r\n        }\r\n\t\t\r\n        /**\r\n         * Helper: reflects dialogs options updates\r\n         *\r\n         * @param {Object} instance The dilog instance.\r\n         * @param {String} option The updated option name.\r\n         *\r\n         * @return\t{undefined}\t\r\n         */\r\n        function optionUpdated(instance, option, oldValue, newValue){\r\n            switch(option){\r\n            case 'title':\r\n                instance.setHeader(newValue);\r\n                break;\r\n            case 'modal':\r\n                updateDisplayMode(instance);\r\n                break;\r\n            case 'basic':\r\n                updateBasicMode(instance);\r\n                break;\r\n            case 'frameless':\r\n                updateFramelessMode(instance);\r\n                break;\r\n            case 'pinned':\r\n                updatePinned(instance);\r\n                break;\r\n            case 'closable':\r\n                updateClosable(instance);\r\n                break;\r\n            case 'maximizable':\r\n                updateMaximizable(instance);\r\n                break;\r\n            case 'pinnable':\r\n                updatePinnable(instance);\r\n                break;\r\n            case 'movable':\r\n                updateMovable(instance);\r\n                break;\r\n            case 'resizable':\r\n                updateResizable(instance);\r\n                break;\r\n            case 'padding':\r\n                if(newValue){\r\n                    removeClass(instance.elements.root, classes.noPadding);\r\n                }else if(instance.elements.root.className.indexOf(classes.noPadding) < 0){\r\n                    addClass(instance.elements.root, classes.noPadding);\r\n                }\r\n                break;\r\n            case 'overflow':\r\n                if(newValue){\r\n                    removeClass(instance.elements.root, classes.noOverflow);\r\n                }else if(instance.elements.root.className.indexOf(classes.noOverflow) < 0){\r\n                    addClass(instance.elements.root, classes.noOverflow);\r\n                }\r\n                break;\r\n            case 'transition':\r\n                updateTransition(instance,newValue, oldValue);\r\n                break;\r\n            case 'transitionOff':\r\n                updateTransitionOff(instance);\r\n                break;\r\n            }\r\n\r\n            // internal on option updated event\r\n            if(typeof instance.hooks.onupdate === 'function'){\r\n                instance.hooks.onupdate.call(instance, option, oldValue, newValue);\r\n            }\r\n        }\r\n\t\t\r\n        /**\r\n         * Helper: reflects dialogs options updates\r\n         *\r\n         * @param {Object} instance The dilog instance.\r\n         * @param {Object} obj The object to set/get a value on/from.\r\n         * @param {Function} callback The callback function to call if the key was found.\r\n         * @param {String|Object} key A string specifying a propery name or a collection of key value pairs.\r\n         * @param {Object} value Optional, the value associated with the key (in case it was a string).\r\n         * @param {String} option The updated option name.\r\n         *\r\n         * @return\t{Object} result object \r\n         *\tThe result objects has an 'op' property, indicating of this is a SET or GET operation.\r\n         *\t\tGET: \r\n         *\t\t- found: a flag indicating if the key was found or not.\r\n         *\t\t- value: the property value.\r\n         *\t\tSET:\r\n         *\t\t- items: a list of key value pairs of the properties being set.\r\n         *\t\t\t\teach contains:\r\n         *\t\t\t\t\t- found: a flag indicating if the key was found or not.\r\n         *\t\t\t\t\t- key: the property key.\r\n         *\t\t\t\t\t- value: the property value.\r\n         */\r\n        function update(instance, obj, callback, key, value){\r\n            var result = {op:undefined, items: [] };\r\n            if(typeof value === 'undefined' && typeof key === 'string') {\r\n                //get\r\n                result.op = 'get';\r\n                if(obj.hasOwnProperty(key)){\r\n                    result.found = true;\r\n                    result.value = obj[key];\r\n                }else{\r\n                    result.found = false;\r\n                    result.value = undefined;\r\n                }\r\n            }\r\n            else\r\n            {\r\n                var old;\r\n                //set\r\n                result.op = 'set';\r\n                if(typeof key === 'object'){\r\n                    //set multiple\r\n                    var args = key;\r\n                    for (var prop in args) {\r\n                        if (obj.hasOwnProperty(prop)) {\r\n                            if(obj[prop] !== args[prop]){\r\n                                old = obj[prop];\r\n                                obj[prop] = args[prop];\r\n                                callback.call(instance,prop, old, args[prop]);\r\n                            }\r\n                            result.items.push({ 'key': prop, 'value': args[prop], 'found':true});\r\n                        }else{\r\n                            result.items.push({ 'key': prop, 'value': args[prop], 'found':false});\r\n                        }\r\n                    }\r\n                } else if (typeof key === 'string'){\r\n                    //set single\r\n                    if (obj.hasOwnProperty(key)) {\r\n                        if(obj[key] !== value){\r\n                            old  = obj[key];\r\n                            obj[key] = value;\r\n                            callback.call(instance,key, old, value);\r\n                        }\r\n                        result.items.push({'key': key, 'value': value , 'found':true});\r\n\r\n                    }else{\r\n                        result.items.push({'key': key, 'value': value , 'found':false});\r\n                    }\r\n                } else {\r\n                    //invalid params\r\n                    throw new Error('args must be a string or object');\r\n                }\r\n            }\r\n            return result;\r\n        }\r\n\r\n\r\n        /**\r\n         * Triggers a close event.\r\n         *\r\n         * @param {Object} instance\tThe dilog instance.\r\n         * \r\n         * @return {undefined}\r\n         */\r\n        function triggerClose(instance) {\r\n            var found;\r\n            triggerCallback(instance, function (button) {\r\n                return found = instance.get('invokeOnCloseOff') !== true && (button.invokeOnClose === true);\r\n            });\r\n            //none of the buttons registered as onclose callback\r\n            //close the dialog\r\n            if (!found && instance.isOpen()) {\r\n                instance.close();\r\n            }\r\n        }\r\n\r\n        /**\r\n         * Dialogs commands event handler, attached to the dialog commands element.\r\n         *\r\n         * @param {Event} event\tDOM event object.\r\n         * @param {Object} instance\tThe dilog instance.\r\n         * \r\n         * @return {undefined}\r\n         */\r\n        function commandsClickHandler(event, instance) {\r\n            var target = event.srcElement || event.target;\r\n            switch (target) {\r\n            case instance.elements.commands.pin:\r\n                if (!instance.isPinned()) {\r\n                    pin(instance);\r\n                } else {\r\n                    unpin(instance);\r\n                }\r\n                break;\r\n            case instance.elements.commands.maximize:\r\n                if (!instance.isMaximized()) {\r\n                    maximize(instance);\r\n                } else {\r\n                    restore(instance);\r\n                }\r\n                break;\r\n            case instance.elements.commands.close:\r\n                triggerClose(instance);\r\n                break;\r\n            }\r\n            return false;\r\n        }\r\n\r\n        /**\r\n         * Helper: pins the modeless dialog.\r\n         *\r\n         * @param {Object} instance\tThe dialog instance.\r\n         * \r\n         * @return {undefined}\r\n         */\r\n        function pin(instance) {\r\n            //pin the dialog\r\n            instance.set('pinned', true);\r\n        }\r\n\r\n        /**\r\n         * Helper: unpins the modeless dialog.\r\n         *\r\n         * @param {Object} instance\tThe dilog instance.\r\n         * \r\n         * @return {undefined}\r\n         */\r\n        function unpin(instance) {\r\n            //unpin the dialog \r\n            instance.set('pinned', false);\r\n        }\r\n\r\n\r\n        /**\r\n         * Helper: enlarges the dialog to fill the entire screen.\r\n         *\r\n         * @param {Object} instance\tThe dilog instance.\r\n         * \r\n         * @return {undefined}\r\n         */\r\n        function maximize(instance) {\r\n            // allow custom `onmaximize` method\r\n            dispatchEvent('onmaximize', instance);\r\n            //maximize the dialog \r\n            addClass(instance.elements.root, classes.maximized);\r\n            if (instance.isOpen()) {\r\n                ensureNoOverflow();\r\n            }\r\n            // allow custom `onmaximized` method\r\n            dispatchEvent('onmaximized', instance);\r\n        }\r\n\r\n        /**\r\n         * Helper: returns the dialog to its former size.\r\n         *\r\n         * @param {Object} instance\tThe dilog instance.\r\n         * \r\n         * @return {undefined}\r\n         */\r\n        function restore(instance) {\r\n            // allow custom `onrestore` method\r\n            dispatchEvent('onrestore', instance);\r\n            //maximize the dialog \r\n            removeClass(instance.elements.root, classes.maximized);\r\n            if (instance.isOpen()) {\r\n                ensureNoOverflow();\r\n            }\r\n            // allow custom `onrestored` method\r\n            dispatchEvent('onrestored', instance);\r\n        }\r\n\r\n        /**\r\n         * Show or hide the maximize box.\r\n         *\r\n         * @param {Object} instance The dilog instance.\r\n         * @param {Boolean} on True to add the behavior, removes it otherwise.\r\n         *\r\n         * @return {undefined}\r\n         */\r\n        function updatePinnable(instance) {\r\n            if (instance.get('pinnable')) {\r\n                // add class\r\n                addClass(instance.elements.root, classes.pinnable);\r\n            } else {\r\n                // remove class\r\n                removeClass(instance.elements.root, classes.pinnable);\r\n            }\r\n        }\r\n\r\n        /**\r\n         * Helper: Fixes the absolutly positioned modal div position.\r\n         *\r\n         * @param {Object} instance The dialog instance.\r\n         *\r\n         * @return {undefined}\r\n         */\r\n        function addAbsPositionFix(instance) {\r\n            var scrollLeft = getScrollLeft();\r\n            instance.elements.modal.style.marginTop = getScrollTop() + 'px';\r\n            instance.elements.modal.style.marginLeft = scrollLeft + 'px';\r\n            instance.elements.modal.style.marginRight = (-scrollLeft) + 'px';\r\n        }\r\n\r\n        /**\r\n         * Helper: Removes the absolutly positioned modal div position fix.\r\n         *\r\n         * @param {Object} instance The dialog instance.\r\n         *\r\n         * @return {undefined}\r\n         */\r\n        function removeAbsPositionFix(instance) {\r\n            var marginTop = parseInt(instance.elements.modal.style.marginTop, 10);\r\n            var marginLeft = parseInt(instance.elements.modal.style.marginLeft, 10);\r\n            instance.elements.modal.style.marginTop = '';\r\n            instance.elements.modal.style.marginLeft = '';\r\n            instance.elements.modal.style.marginRight = '';\r\n\r\n            if (instance.isOpen()) {\r\n                var top = 0,\r\n                    left = 0\r\n                ;\r\n                if (instance.elements.dialog.style.top !== '') {\r\n                    top = parseInt(instance.elements.dialog.style.top, 10);\r\n                }\r\n                instance.elements.dialog.style.top = (top + (marginTop - getScrollTop())) + 'px';\r\n\r\n                if (instance.elements.dialog.style.left !== '') {\r\n                    left = parseInt(instance.elements.dialog.style.left, 10);\r\n                }\r\n                instance.elements.dialog.style.left = (left + (marginLeft - getScrollLeft())) + 'px';\r\n            }\r\n        }\r\n        /**\r\n         * Helper: Adds/Removes the absolutly positioned modal div position fix based on its pinned setting.\r\n         *\r\n         * @param {Object} instance The dialog instance.\r\n         *\r\n         * @return {undefined}\r\n         */\r\n        function updateAbsPositionFix(instance) {\r\n            // if modeless and unpinned add fix\r\n            if (!instance.get('modal') && !instance.get('pinned')) {\r\n                addAbsPositionFix(instance);\r\n            } else {\r\n                removeAbsPositionFix(instance);\r\n            }\r\n        }\r\n        /**\r\n         * Toggles the dialog position lock | modeless only.\r\n         *\r\n         * @param {Object} instance The dilog instance.\r\n         * @param {Boolean} on True to make it modal, false otherwise.\r\n         *\r\n         * @return {undefined}\r\n         */\r\n        function updatePinned(instance) {\r\n            if (instance.get('pinned')) {\r\n                removeClass(instance.elements.root, classes.unpinned);\r\n                if (instance.isOpen()) {\r\n                    removeAbsPositionFix(instance);\r\n                }\r\n            } else {\r\n                addClass(instance.elements.root, classes.unpinned);\r\n                if (instance.isOpen() && !instance.isModal()) {\r\n                    addAbsPositionFix(instance);\r\n                }\r\n            }\r\n        }\r\n\r\n        /**\r\n         * Show or hide the maximize box.\r\n         *\r\n         * @param {Object} instance The dilog instance.\r\n         * @param {Boolean} on True to add the behavior, removes it otherwise.\r\n         *\r\n         * @return {undefined}\r\n         */\r\n        function updateMaximizable(instance) {\r\n            if (instance.get('maximizable')) {\r\n                // add class\r\n                addClass(instance.elements.root, classes.maximizable);\r\n            } else {\r\n                // remove class\r\n                removeClass(instance.elements.root, classes.maximizable);\r\n            }\r\n        }\r\n\r\n        /**\r\n         * Show or hide the close box.\r\n         *\r\n         * @param {Object} instance The dilog instance.\r\n         * @param {Boolean} on True to add the behavior, removes it otherwise.\r\n         *\r\n         * @return {undefined}\r\n         */\r\n        function updateClosable(instance) {\r\n            if (instance.get('closable')) {\r\n                // add class\r\n                addClass(instance.elements.root, classes.closable);\r\n                bindClosableEvents(instance);\r\n            } else {\r\n                // remove class\r\n                removeClass(instance.elements.root, classes.closable);\r\n                unbindClosableEvents(instance);\r\n            }\r\n        }\r\n\r\n        \r\n        var cancelClick = false,// flag to cancel click event if already handled by end resize event (the mousedown, mousemove, mouseup sequence fires a click event.).\r\n            modalClickHandlerTS=0 // stores last click timestamp to prevent executing the handler twice on double click.\r\n            ;\r\n\r\n        /**\r\n         * Helper: closes the modal dialog when clicking the modal\r\n         *\r\n         * @param {Event} event\tDOM event object.\r\n         * @param {Object} instance The dilog instance.\r\n         *\r\n         * @return {undefined}\r\n         */\r\n        function modalClickHandler(event, instance) {\r\n            if(event.timeStamp - modalClickHandlerTS > 200 && (modalClickHandlerTS = event.timeStamp) && !cancelClick){\r\n                var target = event.srcElement || event.target;\r\n                if (instance.get('closableByDimmer') === true && target === instance.elements.modal) {\r\n                    triggerClose(instance);\r\n                }\r\n            }\r\n            cancelClick = false;\r\n        }\r\n\r\n        // stores last call timestamp to prevent triggering the callback twice.\r\n        var callbackTS = 0;\r\n        // flag to cancel keyup event if already handled by click event (pressing Enter on a focusted button).\r\n        var cancelKeyup = false;\r\n        /** \r\n         * Helper: triggers a button callback\r\n         *\r\n         * @param {Object}\t\tThe dilog instance.\r\n         * @param {Function}\tCallback to check which button triggered the event.\r\n         *\r\n         * @return {undefined}\r\n         */\r\n        function triggerCallback(instance, check) {\r\n            if(Date.now() - callbackTS > 200 && (callbackTS = Date.now())){\r\n                for (var idx = 0; idx < instance.__internal.buttons.length; idx += 1) {\r\n                    var button = instance.__internal.buttons[idx];\r\n                    if (!button.element.disabled && check(button)) {\r\n                        var closeEvent = createCloseEvent(idx, button);\r\n                        if (typeof instance.callback === 'function') {\r\n                            instance.callback.apply(instance, [closeEvent]);\r\n                        }\r\n                        //close the dialog only if not canceled.\r\n                        if (closeEvent.cancel === false) {\r\n                            instance.close();\r\n                        }\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        /**\r\n         * Clicks event handler, attached to the dialog footer.\r\n         *\r\n         * @param {Event}\t\tDOM event object.\r\n         * @param {Object}\t\tThe dilog instance.\r\n         * \r\n         * @return {undefined}\r\n         */\r\n        function buttonsClickHandler(event, instance) {\r\n            var target = event.srcElement || event.target;\r\n            triggerCallback(instance, function (button) {\r\n                // if this button caused the click, cancel keyup event\r\n                return button.element.contains(target) && (cancelKeyup = true);\r\n            });\r\n        }\r\n\r\n        /**\r\n         * Keyup event handler, attached to the document.body\r\n         *\r\n         * @param {Event}\t\tDOM event object.\r\n         * @param {Object}\t\tThe dilog instance.\r\n         * \r\n         * @return {undefined}\r\n         */\r\n        function keyupHandler(event) {\r\n            //hitting enter while button has focus will trigger keyup too.\r\n            //ignore if handled by clickHandler\r\n            if (cancelKeyup) {\r\n                cancelKeyup = false;\r\n                return;\r\n            }\r\n            var instance = openDialogs[openDialogs.length - 1];\r\n            var keyCode = event.keyCode;\r\n            if (instance.__internal.buttons.length === 0 && keyCode === keys.ESC && instance.get('closable') === true) {\r\n                triggerClose(instance);\r\n                return false;\r\n            }else if (usedKeys.indexOf(keyCode) > -1) {\r\n                triggerCallback(instance, function (button) {\r\n                    return button.key === keyCode;\r\n                });\r\n                return false;\r\n            }\r\n        }\r\n        /**\r\n        * Keydown event handler, attached to the document.body\r\n        *\r\n        * @param {Event}\t\tDOM event object.\r\n        * @param {Object}\t\tThe dilog instance.\r\n        * \r\n        * @return {undefined}\r\n        */\r\n        function keydownHandler(event) {\r\n            var instance = openDialogs[openDialogs.length - 1];\r\n            var keyCode = event.keyCode;\r\n            if (keyCode === keys.LEFT || keyCode === keys.RIGHT) {\r\n                var buttons = instance.__internal.buttons;\r\n                for (var x = 0; x < buttons.length; x += 1) {\r\n                    if (document.activeElement === buttons[x].element) {\r\n                        switch (keyCode) {\r\n                        case keys.LEFT:\r\n                            buttons[(x || buttons.length) - 1].element.focus();\r\n                            return;\r\n                        case keys.RIGHT:\r\n                            buttons[(x + 1) % buttons.length].element.focus();\r\n                            return;\r\n                        }\r\n                    }\r\n                }\r\n            }else if (keyCode < keys.F12 + 1 && keyCode > keys.F1 - 1 && usedKeys.indexOf(keyCode) > -1) {\r\n                event.preventDefault();\r\n                event.stopPropagation();\r\n                triggerCallback(instance, function (button) {\r\n                    return button.key === keyCode;\r\n                });\r\n                return false;\r\n            }\r\n        }\r\n\r\n\r\n        /**\r\n         * Sets focus to proper dialog element\r\n         *\r\n         * @param {Object} instance The dilog instance.\r\n         * @param {Node} [resetTarget=undefined] DOM element to reset focus to.\r\n         *\r\n         * @return {undefined}\r\n         */\r\n        function setFocus(instance, resetTarget) {\r\n            // reset target has already been determined.\r\n            if (resetTarget) {\r\n                resetTarget.focus();\r\n            } else {\r\n                // current instance focus settings\r\n                var focus = instance.__internal.focus;\r\n                // the focus element.\r\n                var element = focus.element;\r\n\r\n                switch (typeof focus.element) {\r\n                // a number means a button index\r\n                case 'number':\r\n                    if (instance.__internal.buttons.length > focus.element) {\r\n                        //in basic view, skip focusing the buttons.\r\n                        if (instance.get('basic') === true) {\r\n                            element = instance.elements.reset[0];\r\n                        } else {\r\n                            element = instance.__internal.buttons[focus.element].element;\r\n                        }\r\n                    }\r\n                    break;\r\n                // a string means querySelector to select from dialog body contents.\r\n                case 'string':\r\n                    element = instance.elements.body.querySelector(focus.element);\r\n                    break;\r\n                // a function should return the focus element.\r\n                case 'function':\r\n                    element = focus.element.call(instance);\r\n                    break;\r\n                }\r\n\r\n                // if no focus element, default to first reset element.\r\n                if (instance.get('defaultFocusOff') === true || ((typeof element === 'undefined' || element === null) && instance.__internal.buttons.length === 0)) {\r\n                    element = instance.elements.reset[0];\r\n                }\r\n                // focus\r\n                if (element && element.focus) {\r\n                    element.focus();\r\n                    // if selectable\r\n                    if (focus.select && element.select) {\r\n                        element.select();\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        /**\r\n         * Focus event handler, attached to document.body and dialogs own reset links.\r\n         * handles the focus for modal dialogs only.\r\n         *\r\n         * @param {Event} event DOM focus event object.\r\n         * @param {Object} instance The dilog instance.\r\n         *\r\n         * @return {undefined}\r\n         */\r\n        function onReset(event, instance) {\r\n\r\n            // should work on last modal if triggered from document.body \r\n            if (!instance) {\r\n                for (var x = openDialogs.length - 1; x > -1; x -= 1) {\r\n                    if (openDialogs[x].isModal()) {\r\n                        instance = openDialogs[x];\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n\r\n            if(instance) {\r\n                // if modal\r\n                if (instance.isModal()) {\r\n                    // determine reset target to enable forward/backward tab cycle.\r\n                    var firstReset = instance.elements.reset[0],\r\n                        lastReset = instance.elements.reset[1],\r\n                        lastFocusedElement = event.relatedTarget,\r\n                        within = instance.elements.root.contains(lastFocusedElement),\r\n                        target = event.srcElement || event.target,\r\n                        resetTarget;\r\n\r\n                    //if the previous focused element element was outside the modal do nthing\r\n                    if(  /*first show */\r\n                        (target === firstReset && !within) ||\r\n                         /*focus cycle */\r\n                        (target === lastReset && lastFocusedElement === firstReset)){\r\n                        return;\r\n                    }else if(target === lastReset || target === document.body){\r\n                        resetTarget = firstReset;\r\n                    }else if(target === firstReset && lastFocusedElement === lastReset){\r\n                        resetTarget = findTabbable(instance);\r\n                    }else if(target === firstReset && within){\r\n                        resetTarget = findTabbable(instance, true);\r\n                    }\r\n                    // focus\r\n                    setFocus(instance, resetTarget);\r\n                }\r\n            }\r\n        }\r\n        function findTabbable(instance, last){\r\n            var tabbables = [].slice.call(instance.elements.dialog.querySelectorAll(defaults.tabbable));\r\n            if(last){\r\n                tabbables.reverse();\r\n            }\r\n            for(var x=0;x<tabbables.length;x+=1){\r\n                var tabbable = tabbables[x];\r\n                //check if visible\r\n                if(!!(tabbable.offsetParent || tabbable.offsetWidth || tabbable.offsetHeight || tabbable.getClientRects().length)){\r\n                    return tabbable;\r\n                }\r\n            }\r\n        }\r\n        function recycleTab(event) {\r\n            var instance = openDialogs[openDialogs.length - 1];\r\n            if (instance && event.shiftKey && event.keyCode === keys.TAB) {\r\n                instance.elements.reset[1].focus();\r\n            }\r\n        }\r\n        /**\r\n         * Transition in transitionend event handler. \r\n         *\r\n         * @param {Event}\t\tTransitionEnd event object.\r\n         * @param {Object}\t\tThe dilog instance.\r\n         *\r\n         * @return {undefined}\r\n         */\r\n        function handleTransitionInEvent(event, instance) {\r\n            // clear the timer\r\n            clearTimeout(instance.__internal.timerIn);\r\n\r\n            // once transition is complete, set focus\r\n            setFocus(instance);\r\n\r\n            // allow handling key up after transition ended.\r\n            cancelKeyup = false;\r\n\r\n            // allow custom `onfocus` method\r\n            dispatchEvent('onfocus', instance);\r\n\r\n            // unbind the event\r\n            off(instance.elements.dialog, transition.type, instance.__internal.transitionInHandler);\r\n\r\n            removeClass(instance.elements.root, classes.animationIn);\r\n        }\r\n\r\n        /**\r\n         * Transition out transitionend event handler. \r\n         *\r\n         * @param {Event}\t\tTransitionEnd event object.\r\n         * @param {Object}\t\tThe dilog instance.\r\n         *\r\n         * @return {undefined}\r\n         */\r\n        function handleTransitionOutEvent(event, instance) {\r\n            // clear the timer\r\n            clearTimeout(instance.__internal.timerOut);\r\n            // unbind the event\r\n            off(instance.elements.dialog, transition.type, instance.__internal.transitionOutHandler);\r\n\r\n            // reset move updates\r\n            resetMove(instance);\r\n            // reset resize updates\r\n            resetResize(instance);\r\n\r\n            // restore if maximized\r\n            if (instance.isMaximized() && !instance.get('startMaximized')) {\r\n                restore(instance);\r\n            }\r\n\r\n            //destory the instance\r\n            if (typeof instance.__internal.destroy === 'function') {\r\n                instance.__internal.destroy.apply(instance);\r\n            }\r\n        }\r\n        /* Controls moving a dialog around */\r\n        //holde the current moving instance\r\n        var movable = null,\r\n            //holds the current X offset when move starts\r\n            offsetX = 0,\r\n            //holds the current Y offset when move starts\r\n            offsetY = 0,\r\n            xProp = 'pageX',\r\n            yProp = 'pageY',\r\n            bounds = null,\r\n            refreshTop = false,\r\n            moveDelegate = null\r\n        ;\r\n\r\n        /**\r\n         * Helper: sets the element top/left coordinates\r\n         *\r\n         * @param {Event} event\tDOM event object.\r\n         * @param {Node} element The element being moved.\r\n         * \r\n         * @return {undefined}\r\n         */\r\n        function moveElement(event, element) {\r\n            var left = (event[xProp] - offsetX),\r\n                top  = (event[yProp] - offsetY);\r\n\r\n            if(refreshTop){\r\n                top -= document.body.scrollTop;\r\n            }\r\n           \r\n            element.style.left = left + 'px';\r\n            element.style.top = top + 'px';\r\n           \r\n        }\r\n        /**\r\n         * Helper: sets the element top/left coordinates within screen bounds\r\n         *\r\n         * @param {Event} event\tDOM event object.\r\n         * @param {Node} element The element being moved.\r\n         * \r\n         * @return {undefined}\r\n         */\r\n        function moveElementBounded(event, element) {\r\n            var left = (event[xProp] - offsetX),\r\n                top  = (event[yProp] - offsetY);\r\n\r\n            if(refreshTop){\r\n                top -= document.body.scrollTop;\r\n            }\r\n            \r\n            element.style.left = Math.min(bounds.maxLeft, Math.max(bounds.minLeft, left)) + 'px';\r\n            if(refreshTop){\r\n                element.style.top = Math.min(bounds.maxTop, Math.max(bounds.minTop, top)) + 'px';\r\n            }else{\r\n                element.style.top = Math.max(bounds.minTop, top) + 'px';\r\n            }\r\n        }\r\n            \r\n\r\n        /**\r\n         * Triggers the start of a move event, attached to the header element mouse down event.\r\n         * Adds no-selection class to the body, disabling selection while moving.\r\n         *\r\n         * @param {Event} event\tDOM event object.\r\n         * @param {Object} instance The dilog instance.\r\n         * \r\n         * @return {Boolean} false\r\n         */\r\n        function beginMove(event, instance) {\r\n            if (resizable === null && !instance.isMaximized() && instance.get('movable')) {\r\n                var eventSrc, left=0, top=0;\r\n                if (event.type === 'touchstart') {\r\n                    event.preventDefault();\r\n                    eventSrc = event.targetTouches[0];\r\n                    xProp = 'clientX';\r\n                    yProp = 'clientY';\r\n                } else if (event.button === 0) {\r\n                    eventSrc = event;\r\n                }\r\n\r\n                if (eventSrc) {\r\n\r\n                    var element = instance.elements.dialog;\r\n                    addClass(element, classes.capture);\r\n\r\n                    if (element.style.left) {\r\n                        left = parseInt(element.style.left, 10);\r\n                    }\r\n\r\n                    if (element.style.top) {\r\n                        top = parseInt(element.style.top, 10);\r\n                    }\r\n                    \r\n                    offsetX = eventSrc[xProp] - left;\r\n                    offsetY = eventSrc[yProp] - top;\r\n\r\n                    if(instance.isModal()){\r\n                        offsetY += instance.elements.modal.scrollTop;\r\n                    }else if(instance.isPinned()){\r\n                        offsetY -= document.body.scrollTop;\r\n                    }\r\n                    \r\n                    if(instance.get('moveBounded')){\r\n                        var current = element,\r\n                            offsetLeft = -left,\r\n                            offsetTop = -top;\r\n                        \r\n                        //calc offset\r\n                        do {\r\n                            offsetLeft += current.offsetLeft;\r\n                            offsetTop += current.offsetTop;\r\n                        } while (current = current.offsetParent);\r\n                        \r\n                        bounds = {\r\n                            maxLeft : offsetLeft,\r\n                            minLeft : -offsetLeft,\r\n                            maxTop  : document.documentElement.clientHeight - element.clientHeight - offsetTop,\r\n                            minTop  : -offsetTop\r\n                        };\r\n                        moveDelegate = moveElementBounded;\r\n                    }else{\r\n                        bounds = null;\r\n                        moveDelegate = moveElement;\r\n                    }\r\n                    \r\n                    // allow custom `onmove` method\r\n                    dispatchEvent('onmove', instance);\r\n\r\n                    refreshTop = !instance.isModal() && instance.isPinned();\r\n                    movable = instance;\r\n                    moveDelegate(eventSrc, element);\r\n                    addClass(document.body, classes.noSelection);\r\n                    return false;\r\n                }\r\n            }\r\n        }\r\n\r\n        /**\r\n         * The actual move handler,  attached to document.body mousemove event.\r\n         *\r\n         * @param {Event} event\tDOM event object.\r\n         * \r\n         * @return {undefined}\r\n         */\r\n        function move(event) {\r\n            if (movable) {\r\n                var eventSrc;\r\n                if (event.type === 'touchmove') {\r\n                    event.preventDefault();\r\n                    eventSrc = event.targetTouches[0];\r\n                } else if (event.button === 0) {\r\n                    eventSrc = event;\r\n                }\r\n                if (eventSrc) {\r\n                    moveDelegate(eventSrc, movable.elements.dialog);\r\n                }\r\n            }\r\n        }\r\n\r\n        /**\r\n         * Triggers the end of a move event,  attached to document.body mouseup event.\r\n         * Removes no-selection class from document.body, allowing selection.\r\n         *\r\n         * @return {undefined}\r\n         */\r\n        function endMove() {\r\n            if (movable) {\r\n                var instance = movable;\r\n                movable = bounds = null;\r\n                removeClass(document.body, classes.noSelection);\r\n                removeClass(instance.elements.dialog, classes.capture);\r\n                // allow custom `onmoved` method\r\n                dispatchEvent('onmoved', instance);\r\n            }\r\n        }\r\n\r\n        /**\r\n         * Resets any changes made by moving the element to its original state,\r\n         *\r\n         * @param {Object} instance The dilog instance.\r\n         *\r\n         * @return {undefined}\r\n         */\r\n        function resetMove(instance) {\r\n            movable = null;\r\n            var element = instance.elements.dialog;\r\n            element.style.left = element.style.top = '';\r\n        }\r\n\r\n        /**\r\n         * Updates the dialog move behavior.\r\n         *\r\n         * @param {Object} instance The dilog instance.\r\n         * @param {Boolean} on True to add the behavior, removes it otherwise.\r\n         *\r\n         * @return {undefined}\r\n         */\r\n        function updateMovable(instance) {\r\n            if (instance.get('movable')) {\r\n                // add class\r\n                addClass(instance.elements.root, classes.movable);\r\n                if (instance.isOpen()) {\r\n                    bindMovableEvents(instance);\r\n                }\r\n            } else {\r\n\r\n                //reset\r\n                resetMove(instance);\r\n                // remove class\r\n                removeClass(instance.elements.root, classes.movable);\r\n                if (instance.isOpen()) {\r\n                    unbindMovableEvents(instance);\r\n                }\r\n            }\r\n        }\r\n\r\n        /* Controls moving a dialog around */\r\n        //holde the current instance being resized\t\t\r\n        var resizable = null,\r\n            //holds the staring left offset when resize starts.\r\n            startingLeft = Number.Nan,\r\n            //holds the staring width when resize starts.\r\n            startingWidth = 0,\r\n            //holds the initial width when resized for the first time.\r\n            minWidth = 0,\r\n            //holds the offset of the resize handle.\r\n            handleOffset = 0\r\n        ;\r\n\r\n        /**\r\n         * Helper: sets the element width/height and updates left coordinate if neccessary.\r\n         *\r\n         * @param {Event} event\tDOM mousemove event object.\r\n         * @param {Node} element The element being moved.\r\n         * @param {Boolean} pinned A flag indicating if the element being resized is pinned to the screen.\r\n         * \r\n         * @return {undefined}\r\n         */\r\n        function resizeElement(event, element, pageRelative) {\r\n\r\n            //calculate offsets from 0,0\r\n            var current = element;\r\n            var offsetLeft = 0;\r\n            var offsetTop = 0;\r\n            do {\r\n                offsetLeft += current.offsetLeft;\r\n                offsetTop += current.offsetTop;\r\n            } while (current = current.offsetParent);\r\n\r\n            // determine X,Y coordinates.\r\n            var X, Y;\r\n            if (pageRelative === true) {\r\n                X = event.pageX;\r\n                Y = event.pageY;\r\n            } else {\r\n                X = event.clientX;\r\n                Y = event.clientY;\r\n            }\r\n            // rtl handling\r\n            var isRTL = isRightToLeft();\r\n            if (isRTL) {\r\n                // reverse X \r\n                X = document.body.offsetWidth - X;\r\n                // if has a starting left, calculate offsetRight\r\n                if (!isNaN(startingLeft)) {\r\n                    offsetLeft = document.body.offsetWidth - offsetLeft - element.offsetWidth;\r\n                }\r\n            }\r\n\r\n            // set width/height\r\n            element.style.height = (Y - offsetTop + handleOffset) + 'px';\r\n            element.style.width = (X - offsetLeft + handleOffset) + 'px';\r\n\r\n            // if the element being resized has a starting left, maintain it.\r\n            // the dialog is centered, divide by half the offset to maintain the margins.\r\n            if (!isNaN(startingLeft)) {\r\n                var diff = Math.abs(element.offsetWidth - startingWidth) * 0.5;\r\n                if (isRTL) {\r\n                    //negate the diff, why?\r\n                    //when growing it should decrease left\r\n                    //when shrinking it should increase left\r\n                    diff *= -1;\r\n                }\r\n                if (element.offsetWidth > startingWidth) {\r\n                    //growing\r\n                    element.style.left = (startingLeft + diff) + 'px';\r\n                } else if (element.offsetWidth >= minWidth) {\r\n                    //shrinking\r\n                    element.style.left = (startingLeft - diff) + 'px';\r\n                }\r\n            }\r\n        }\r\n\r\n        /**\r\n         * Triggers the start of a resize event, attached to the resize handle element mouse down event.\r\n         * Adds no-selection class to the body, disabling selection while moving.\r\n         *\r\n         * @param {Event} event\tDOM event object.\r\n         * @param {Object} instance The dilog instance.\r\n         * \r\n         * @return {Boolean} false\r\n         */\r\n        function beginResize(event, instance) {\r\n            if (!instance.isMaximized()) {\r\n                var eventSrc;\r\n                if (event.type === 'touchstart') {\r\n                    event.preventDefault();\r\n                    eventSrc = event.targetTouches[0];\r\n                } else if (event.button === 0) {\r\n                    eventSrc = event;\r\n                }\r\n                if (eventSrc) {\r\n                    // allow custom `onresize` method\r\n                    dispatchEvent('onresize', instance);\r\n                    \r\n                    resizable = instance;\r\n                    handleOffset = instance.elements.resizeHandle.offsetHeight / 2;\r\n                    var element = instance.elements.dialog;\r\n                    addClass(element, classes.capture);\r\n                    startingLeft = parseInt(element.style.left, 10);\r\n                    element.style.height = element.offsetHeight + 'px';\r\n                    element.style.minHeight = instance.elements.header.offsetHeight + instance.elements.footer.offsetHeight + 'px';\r\n                    element.style.width = (startingWidth = element.offsetWidth) + 'px';\r\n\r\n                    if (element.style.maxWidth !== 'none') {\r\n                        element.style.minWidth = (minWidth = element.offsetWidth) + 'px';\r\n                    }\r\n                    element.style.maxWidth = 'none';\r\n                    addClass(document.body, classes.noSelection);\r\n                    return false;\r\n                }\r\n            }\r\n        }\r\n\r\n        /**\r\n         * The actual resize handler,  attached to document.body mousemove event.\r\n         *\r\n         * @param {Event} event\tDOM event object.\r\n         * \r\n         * @return {undefined}\r\n         */\r\n        function resize(event) {\r\n            if (resizable) {\r\n                var eventSrc;\r\n                if (event.type === 'touchmove') {\r\n                    event.preventDefault();\r\n                    eventSrc = event.targetTouches[0];\r\n                } else if (event.button === 0) {\r\n                    eventSrc = event;\r\n                }\r\n                if (eventSrc) {\r\n                    resizeElement(eventSrc, resizable.elements.dialog, !resizable.get('modal') && !resizable.get('pinned'));\r\n                }\r\n            }\r\n        }\r\n\r\n        /**\r\n         * Triggers the end of a resize event,  attached to document.body mouseup event.\r\n         * Removes no-selection class from document.body, allowing selection.\r\n         *\r\n         * @return {undefined}\r\n         */\r\n        function endResize() {\r\n            if (resizable) {\r\n                var instance = resizable;\r\n                resizable = null;\r\n                removeClass(document.body, classes.noSelection);\r\n                removeClass(instance.elements.dialog, classes.capture);\r\n                cancelClick = true;\r\n                // allow custom `onresized` method\r\n                dispatchEvent('onresized', instance);\r\n            }\r\n        }\r\n\r\n        /**\r\n         * Resets any changes made by resizing the element to its original state.\r\n         *\r\n         * @param {Object} instance The dilog instance.\r\n         *\r\n         * @return {undefined}\r\n         */\r\n        function resetResize(instance) {\r\n            resizable = null;\r\n            var element = instance.elements.dialog;\r\n            if (element.style.maxWidth === 'none') {\r\n                //clear inline styles.\r\n                element.style.maxWidth = element.style.minWidth = element.style.width = element.style.height = element.style.minHeight = element.style.left = '';\r\n                //reset variables.\r\n                startingLeft = Number.Nan;\r\n                startingWidth = minWidth = handleOffset = 0;\r\n            }\r\n        }\r\n\r\n\r\n        /**\r\n         * Updates the dialog move behavior.\r\n         *\r\n         * @param {Object} instance The dilog instance.\r\n         * @param {Boolean} on True to add the behavior, removes it otherwise.\r\n         *\r\n         * @return {undefined}\r\n         */\r\n        function updateResizable(instance) {\r\n            if (instance.get('resizable')) {\r\n                // add class\r\n                addClass(instance.elements.root, classes.resizable);\r\n                if (instance.isOpen()) {\r\n                    bindResizableEvents(instance);\r\n                }\r\n            } else {\r\n                //reset\r\n                resetResize(instance);\r\n                // remove class\r\n                removeClass(instance.elements.root, classes.resizable);\r\n                if (instance.isOpen()) {\r\n                    unbindResizableEvents(instance);\r\n                }\r\n            }\r\n        }\r\n\r\n        /**\r\n         * Reset move/resize on window resize.\r\n         *\r\n         * @param {Event} event\twindow resize event object.\r\n         *\r\n         * @return {undefined}\r\n         */\r\n        function windowResize(/*event*/) {\r\n            for (var x = 0; x < openDialogs.length; x += 1) {\r\n                var instance = openDialogs[x];\r\n                if (instance.get('autoReset')) {\r\n                    resetMove(instance);\r\n                    resetResize(instance);\r\n                }\r\n            }\r\n        }\r\n        /**\r\n         * Bind dialogs events\r\n         *\r\n         * @param {Object} instance The dilog instance.\r\n         *\r\n         * @return {undefined}\r\n         */\r\n        function bindEvents(instance) {\r\n            // if first dialog, hook global handlers\r\n            if (openDialogs.length === 1) {\r\n                //global\r\n                on(window, 'resize', windowResize);\r\n                on(document.body, 'keyup', keyupHandler);\r\n                on(document.body, 'keydown', keydownHandler);\r\n                on(document.body, 'focus', onReset);\r\n\r\n                //move\r\n                on(document.documentElement, 'mousemove', move);\r\n                on(document.documentElement, 'touchmove', move, false, false);\r\n                on(document.documentElement, 'mouseup', endMove);\r\n                on(document.documentElement, 'touchend', endMove);\r\n                //resize\r\n                on(document.documentElement, 'mousemove', resize);\r\n                on(document.documentElement, 'touchmove', resize, false, false);\r\n                on(document.documentElement, 'mouseup', endResize);\r\n                on(document.documentElement, 'touchend', endResize);\r\n            }\r\n\r\n            // common events\r\n            on(instance.elements.commands.container, 'click', instance.__internal.commandsClickHandler);\r\n            on(instance.elements.footer, 'click', instance.__internal.buttonsClickHandler);\r\n            on(instance.elements.reset[0], 'focusin', instance.__internal.resetHandler);\r\n            on(instance.elements.reset[0], 'keydown', recycleTab);\r\n            on(instance.elements.reset[1], 'focusin', instance.__internal.resetHandler);\r\n\r\n            //prevent handling key up when dialog is being opened by a key stroke.\r\n            cancelKeyup = true;\r\n            // hook in transition handler\r\n            on(instance.elements.dialog, transition.type, instance.__internal.transitionInHandler);\r\n\r\n            // modelss only events\r\n            if (!instance.get('modal')) {\r\n                bindModelessEvents(instance);\r\n            }\r\n\r\n            // resizable\r\n            if (instance.get('resizable')) {\r\n                bindResizableEvents(instance);\r\n            }\r\n\r\n            // movable\r\n            if (instance.get('movable')) {\r\n                bindMovableEvents(instance);\r\n            }\r\n        }\r\n\r\n        /**\r\n         * Unbind dialogs events\r\n         *\r\n         * @param {Object} instance The dilog instance.\r\n         *\r\n         * @return {undefined}\r\n         */\r\n        function unbindEvents(instance) {\r\n            // if last dialog, remove global handlers\r\n            if (openDialogs.length === 1) {\r\n                //global\r\n                off(window, 'resize', windowResize);\r\n                off(document.body, 'keyup', keyupHandler);\r\n                off(document.body, 'keydown', keydownHandler);\r\n                off(document.body, 'focus', onReset);\r\n                //move\r\n                off(document.documentElement, 'mousemove', move);\r\n                off(document.documentElement, 'mouseup', endMove);\r\n                //resize\r\n                off(document.documentElement, 'mousemove', resize);\r\n                off(document.documentElement, 'mouseup', endResize);\r\n            }\r\n\r\n            // common events\r\n            off(instance.elements.commands.container, 'click', instance.__internal.commandsClickHandler);\r\n            off(instance.elements.footer, 'click', instance.__internal.buttonsClickHandler);\r\n            off(instance.elements.reset[0], 'focusin', instance.__internal.resetHandler);\r\n            off(instance.elements.reset[0], 'keydown', recycleTab);\r\n            off(instance.elements.reset[1], 'focusin', instance.__internal.resetHandler);\r\n\r\n            // hook out transition handler\r\n            on(instance.elements.dialog, transition.type, instance.__internal.transitionOutHandler);\r\n\r\n            // modelss only events\r\n            if (!instance.get('modal')) {\r\n                unbindModelessEvents(instance);\r\n            }\r\n\r\n            // movable\r\n            if (instance.get('movable')) {\r\n                unbindMovableEvents(instance);\r\n            }\r\n\r\n            // resizable\r\n            if (instance.get('resizable')) {\r\n                unbindResizableEvents(instance);\r\n            }\r\n\r\n        }\r\n\r\n        /**\r\n         * Bind modeless specific events\r\n         *\r\n         * @param {Object} instance The dilog instance.\r\n         *\r\n         * @return {undefined}\r\n         */\r\n        function bindModelessEvents(instance) {\r\n            on(instance.elements.dialog, 'focus', instance.__internal.bringToFrontHandler, true);\r\n        }\r\n\r\n        /**\r\n         * Unbind modeless specific events\r\n         *\r\n         * @param {Object} instance The dilog instance.\r\n         *\r\n         * @return {undefined}\r\n         */\r\n        function unbindModelessEvents(instance) {\r\n            off(instance.elements.dialog, 'focus', instance.__internal.bringToFrontHandler, true);\r\n        }\r\n\r\n\r\n\r\n        /**\r\n         * Bind movable specific events\r\n         *\r\n         * @param {Object} instance The dilog instance.\r\n         *\r\n         * @return {undefined}\r\n         */\r\n        function bindMovableEvents(instance) {\r\n            on(instance.elements.header, 'mousedown', instance.__internal.beginMoveHandler);\r\n            on(instance.elements.header, 'touchstart', instance.__internal.beginMoveHandler, false, false);\r\n        }\r\n\r\n        /**\r\n         * Unbind movable specific events\r\n         *\r\n         * @param {Object} instance The dilog instance.\r\n         *\r\n         * @return {undefined}\r\n         */\r\n        function unbindMovableEvents(instance) {\r\n            off(instance.elements.header, 'mousedown', instance.__internal.beginMoveHandler);\r\n            off(instance.elements.header, 'touchstart', instance.__internal.beginMoveHandler, false, false);\r\n        }\r\n\r\n\r\n\r\n        /**\r\n         * Bind resizable specific events\r\n         *\r\n         * @param {Object} instance The dilog instance.\r\n         *\r\n         * @return {undefined}\r\n         */\r\n        function bindResizableEvents(instance) {\r\n            on(instance.elements.resizeHandle, 'mousedown', instance.__internal.beginResizeHandler);\r\n            on(instance.elements.resizeHandle, 'touchstart', instance.__internal.beginResizeHandler, false, false);\r\n        }\r\n\r\n        /**\r\n         * Unbind resizable specific events\r\n         *\r\n         * @param {Object} instance The dilog instance.\r\n         *\r\n         * @return {undefined}\r\n         */\r\n        function unbindResizableEvents(instance) {\r\n            off(instance.elements.resizeHandle, 'mousedown', instance.__internal.beginResizeHandler);\r\n            off(instance.elements.resizeHandle, 'touchstart', instance.__internal.beginResizeHandler, false, false);\r\n        }\r\n\r\n        /**\r\n         * Bind closable events\r\n         *\r\n         * @param {Object} instance The dilog instance.\r\n         *\r\n         * @return {undefined}\r\n         */\r\n        function bindClosableEvents(instance) {\r\n            on(instance.elements.modal, 'click', instance.__internal.modalClickHandler);\r\n        }\r\n\r\n        /**\r\n         * Unbind closable specific events\r\n         *\r\n         * @param {Object} instance The dilog instance.\r\n         *\r\n         * @return {undefined}\r\n         */\r\n        function unbindClosableEvents(instance) {\r\n            off(instance.elements.modal, 'click', instance.__internal.modalClickHandler);\r\n        }\r\n        // dialog API\r\n        return {\r\n            __init:initialize,\r\n            /**\r\n             * Check if dialog is currently open\r\n             *\r\n             * @return {Boolean}\r\n             */\r\n            isOpen: function () {\r\n                return this.__internal.isOpen;\r\n            },\r\n            isModal: function (){\r\n                return this.elements.root.className.indexOf(classes.modeless) < 0;\r\n            },\r\n            isMaximized:function(){\r\n                return this.elements.root.className.indexOf(classes.maximized) > -1;\r\n            },\r\n            isPinned:function(){\r\n                return this.elements.root.className.indexOf(classes.unpinned) < 0;\r\n            },\r\n            maximize:function(){\r\n                if(!this.isMaximized()){\r\n                    maximize(this);\r\n                }\r\n                return this;\r\n            },\r\n            restore:function(){\r\n                if(this.isMaximized()){\r\n                    restore(this);\r\n                }\r\n                return this;\r\n            },\r\n            pin:function(){\r\n                if(!this.isPinned()){\r\n                    pin(this);\r\n                }\r\n                return this;\r\n            },\r\n            unpin:function(){\r\n                if(this.isPinned()){\r\n                    unpin(this);\r\n                }\r\n                return this;\r\n            },\r\n            bringToFront:function(){\r\n                bringToFront(null, this);\r\n                return this;\r\n            },\r\n            /**\r\n             * Move the dialog to a specific x/y coordinates\r\n             *\r\n             * @param {Number} x    The new dialog x coordinate in pixels.\r\n             * @param {Number} y    The new dialog y coordinate in pixels.\r\n             *\r\n             * @return {Object} The dialog instance.\r\n             */\r\n            moveTo:function(x,y){\r\n                if(!isNaN(x) && !isNaN(y)){\r\n                    // allow custom `onmove` method\r\n                    dispatchEvent('onmove', this);\r\n                    \r\n                    var element = this.elements.dialog,\r\n                        current = element,\r\n                        offsetLeft = 0,\r\n                        offsetTop = 0;\r\n                    \r\n                    //subtract existing left,top\r\n                    if (element.style.left) {\r\n                        offsetLeft -= parseInt(element.style.left, 10);\r\n                    }\r\n                    if (element.style.top) {\r\n                        offsetTop -= parseInt(element.style.top, 10);\r\n                    }\r\n                    //calc offset\r\n                    do {\r\n                        offsetLeft += current.offsetLeft;\r\n                        offsetTop += current.offsetTop;\r\n                    } while (current = current.offsetParent);\r\n\r\n                    //calc left, top\r\n                    var left = (x - offsetLeft);\r\n                    var top  = (y - offsetTop);\r\n\r\n                    //// rtl handling\r\n                    if (isRightToLeft()) {\r\n                        left *= -1;\r\n                    }\r\n\r\n                    element.style.left = left + 'px';\r\n                    element.style.top = top + 'px';\r\n                    \r\n                    // allow custom `onmoved` method\r\n                    dispatchEvent('onmoved', this);\r\n                }\r\n                return this;\r\n            },\r\n            /**\r\n             * Resize the dialog to a specific width/height (the dialog must be 'resizable').\r\n             * The dialog can be resized to:\r\n             *  A minimum width equal to the initial display width\r\n             *  A minimum height equal to the sum of header/footer heights.\r\n             *\r\n             *\r\n             * @param {Number or String} width    The new dialog width in pixels or in percent.\r\n             * @param {Number or String} height   The new dialog height in pixels or in percent.\r\n             *\r\n             * @return {Object} The dialog instance.\r\n             */\r\n            resizeTo:function(width,height){\r\n                var w = parseFloat(width),\r\n                    h = parseFloat(height),\r\n                    regex = /(\\d*\\.\\d+|\\d+)%/\r\n                ;\r\n\r\n                if(!isNaN(w) && !isNaN(h) && this.get('resizable') === true){\r\n                    \r\n                    // allow custom `onresize` method\r\n                    dispatchEvent('onresize', this);\r\n                    \r\n                    if(('' + width).match(regex)){\r\n                        w = w / 100 * document.documentElement.clientWidth ;\r\n                    }\r\n\r\n                    if(('' + height).match(regex)){\r\n                        h = h / 100 * document.documentElement.clientHeight;\r\n                    }\r\n\r\n                    var element = this.elements.dialog;\r\n                    if (element.style.maxWidth !== 'none') {\r\n                        element.style.minWidth = (minWidth = element.offsetWidth) + 'px';\r\n                    }\r\n                    element.style.maxWidth = 'none';\r\n                    element.style.minHeight = this.elements.header.offsetHeight + this.elements.footer.offsetHeight + 'px';\r\n                    element.style.width = w + 'px';\r\n                    element.style.height = h + 'px';\r\n                    \r\n                    // allow custom `onresized` method\r\n                    dispatchEvent('onresized', this);\r\n                }\r\n                return this;\r\n            },\r\n            /**\r\n             * Gets or Sets dialog settings/options \r\n             *\r\n             * @param {String|Object} key A string specifying a propery name or a collection of key/value pairs.\r\n             * @param {Object} value Optional, the value associated with the key (in case it was a string).\r\n             *\r\n             * @return {undefined}\r\n             */\r\n            setting : function (key, value) {\r\n                var self = this;\r\n                var result = update(this, this.__internal.options, function(k,o,n){ optionUpdated(self,k,o,n); }, key, value);\r\n                if(result.op === 'get'){\r\n                    if(result.found){\r\n                        return result.value;\r\n                    }else if(typeof this.settings !== 'undefined'){\r\n                        return update(this, this.settings, this.settingUpdated || function(){}, key, value).value;\r\n                    }else{\r\n                        return undefined;\r\n                    }\r\n                }else if(result.op === 'set'){\r\n                    if(result.items.length > 0){\r\n                        var callback = this.settingUpdated || function(){};\r\n                        for(var x=0;x<result.items.length;x+=1){\r\n                            var item = result.items[x];\r\n                            if(!item.found && typeof this.settings !== 'undefined'){\r\n                                update(this, this.settings, callback, item.key, item.value);\r\n                            }\r\n                        }\r\n                    }\r\n                    return this;\r\n                }\r\n            },\r\n            /**\r\n             * [Alias] Sets dialog settings/options \r\n             */\r\n            set:function(key, value){\r\n                this.setting(key,value);\r\n                return this;\r\n            },\r\n            /**\r\n             * [Alias] Gets dialog settings/options \r\n             */\r\n            get:function(key){\r\n                return this.setting(key);\r\n            },\r\n            /**\r\n            * Sets dialog header\r\n            * @content {string or element}\r\n            *\r\n            * @return {undefined}\r\n            */\r\n            setHeader:function(content){\r\n                if(isString(content)){\r\n                    clearContents(this.elements.header);\r\n                    this.elements.header.innerHTML = content;\r\n                }else if (content instanceof window.HTMLElement && this.elements.header.firstChild !== content){\r\n                    clearContents(this.elements.header);\r\n                    this.elements.header.appendChild(content);\r\n                }\r\n                return this;\r\n            },\r\n            /**\r\n            * Sets dialog contents\r\n            * @content {string or element}\r\n            *\r\n            * @return {undefined}\r\n            */\r\n            setContent:function(content){\r\n                if(isString(content)){\r\n                    clearContents(this.elements.content);\r\n                    this.elements.content.innerHTML = content;\r\n                }else if (content instanceof window.HTMLElement && this.elements.content.firstChild !== content){\r\n                    clearContents(this.elements.content);\r\n                    this.elements.content.appendChild(content);\r\n                }\r\n                return this;\r\n            },\r\n            /**\r\n             * Show the dialog as modal\r\n             *\r\n             * @return {Object} the dialog instance.\r\n             */\r\n            showModal: function(className){\r\n                return this.show(true, className);\r\n            },\r\n            /**\r\n             * Show the dialog\r\n             *\r\n             * @return {Object} the dialog instance.\r\n             */\r\n            show: function (modal, className) {\r\n                \r\n                // ensure initialization\r\n                initialize(this);\r\n\r\n                if ( !this.__internal.isOpen ) {\r\n\r\n                    // add to open dialogs\r\n                    this.__internal.isOpen = true;\r\n                    openDialogs.push(this);\r\n\r\n                    // save last focused element\r\n                    if(alertify.defaults.maintainFocus){\r\n                        this.__internal.activeElement = document.activeElement;\r\n                    }\r\n\r\n                    // set tabindex attribute on body element this allows script to give it focusable\r\n                    if(!document.body.hasAttribute('tabindex')) {\r\n                        document.body.setAttribute( 'tabindex', tabindex = '0');\r\n                    }\r\n\r\n                    //allow custom dom manipulation updates before showing the dialog.\r\n                    if(typeof this.prepare === 'function'){\r\n                        this.prepare();\r\n                    }\r\n\r\n                    bindEvents(this);\r\n\r\n                    if(modal !== undefined){\r\n                        this.set('modal', modal);\r\n                    }\r\n\r\n                    //save scroll to prevent document jump\r\n                    saveScrollPosition();\r\n\r\n                    ensureNoOverflow();\r\n\r\n                    // allow custom dialog class on show\r\n                    if(typeof className === 'string' && className !== ''){\r\n                        this.__internal.className = className;\r\n                        addClass(this.elements.root, className);\r\n                    }\r\n\r\n                    // maximize if start maximized\r\n                    if ( this.get('startMaximized')) {\r\n                        this.maximize();\r\n                    }else if(this.isMaximized()){\r\n                        restore(this);\r\n                    }\r\n\r\n                    updateAbsPositionFix(this);\r\n                    this.elements.root.removeAttribute('style');\r\n                    removeClass(this.elements.root, classes.animationOut);\r\n                    addClass(this.elements.root, classes.animationIn);\r\n\r\n                    // set 1s fallback in case transition event doesn't fire\r\n                    clearTimeout( this.__internal.timerIn);\r\n                    this.__internal.timerIn = setTimeout( this.__internal.transitionInHandler, transition.supported ? 1000 : 100 );\r\n\r\n                    if(isSafari){\r\n                        // force desktop safari reflow\r\n                        var root = this.elements.root;\r\n                        root.style.display  = 'none';\r\n                        setTimeout(function(){root.style.display  = 'block';}, 0);\r\n                    }\r\n\r\n                    //reflow\r\n                    reflow = this.elements.root.offsetWidth;\r\n                  \r\n                    // show dialog\r\n                    removeClass(this.elements.root, classes.hidden);\r\n\r\n                    //restore scroll to prevent document jump\r\n                    restoreScrollPosition();\r\n\r\n                    // internal on show event\r\n                    if(typeof this.hooks.onshow === 'function'){\r\n                        this.hooks.onshow.call(this);\r\n                    }\r\n\r\n                    // allow custom `onshow` method\r\n                    dispatchEvent('onshow', this);\r\n\r\n                }else{\r\n                    // reset move updates\r\n                    resetMove(this);\r\n                    // reset resize updates\r\n                    resetResize(this);\r\n                    // shake the dialog to indicate its already open\r\n                    addClass(this.elements.dialog, classes.shake);\r\n                    var self = this;\r\n                    setTimeout(function(){\r\n                        removeClass(self.elements.dialog, classes.shake);\r\n                    },200);\r\n                }\r\n                return this;\r\n            },\r\n            /**\r\n             * Close the dialog\r\n             *\r\n             * @return {Object} The dialog instance\r\n             */\r\n            close: function () {\r\n                if (this.__internal.isOpen ) {\r\n                    // custom `onclosing` event\r\n                    if(dispatchEvent('onclosing', this) !== false){\r\n\r\n                        unbindEvents(this);\r\n\r\n                        removeClass(this.elements.root, classes.animationIn);\r\n                        addClass(this.elements.root, classes.animationOut);\r\n\r\n                        // set 1s fallback in case transition event doesn't fire\r\n                        clearTimeout( this.__internal.timerOut );\r\n                        this.__internal.timerOut = setTimeout( this.__internal.transitionOutHandler, transition.supported ? 1000 : 100 );\r\n                        // hide dialog\r\n                        addClass(this.elements.root, classes.hidden);\r\n                        //reflow\r\n                        reflow = this.elements.modal.offsetWidth;\r\n\r\n                        // return focus to the last active element\r\n                        if (alertify.defaults.maintainFocus && this.__internal.activeElement) {\r\n                            this.__internal.activeElement.focus();\r\n                            this.__internal.activeElement = null;\r\n                        }\r\n\r\n                        // remove custom dialog class on hide\r\n                        if (typeof this.__internal.className !== 'undefined' && this.__internal.className !== '') {\r\n                            removeClass(this.elements.root, this.__internal.className);\r\n                        }\r\n\r\n                        // internal on close event\r\n                        if(typeof this.hooks.onclose === 'function'){\r\n                            this.hooks.onclose.call(this);\r\n                        }\r\n\r\n                        // allow custom `onclose` method\r\n                        dispatchEvent('onclose', this);\r\n\r\n                        //remove from open dialogs\r\n                        openDialogs.splice(openDialogs.indexOf(this),1);\r\n                        this.__internal.isOpen = false;\r\n\r\n                        ensureNoOverflow();\r\n                    }\r\n\r\n                }\r\n                // last dialog and tab index was set by us, remove it.\r\n                if(!openDialogs.length && tabindex === '0'){\r\n                    document.body.removeAttribute('tabindex');\r\n                }\r\n                return this;\r\n            },\r\n            /**\r\n             * Close all open dialogs except this.\r\n             *\r\n             * @return {undefined}\r\n             */\r\n            closeOthers:function(){\r\n                alertify.closeAll(this);\r\n                return this;\r\n            },\r\n            /**\r\n             * Destroys this dialog instance\r\n             *\r\n             * @return {undefined}\r\n             */\r\n            destroy:function(){\r\n                if(this.__internal) {\r\n                    if (this.__internal.isOpen ) {\r\n                        //mark dialog for destruction, this will be called on tranistionOut event.\r\n                        this.__internal.destroy = function(){\r\n                            destruct(this, initialize);\r\n                        };\r\n                        //close the dialog to unbind all events.\r\n                        this.close();\r\n                    }else if(!this.__internal.destroy){\r\n                        destruct(this, initialize);\r\n                    }\r\n                }\r\n                return this;\r\n            },\r\n        };\r\n\r\n\t} () );\r\n    var notifier = (function () {\r\n        var reflow,\r\n            element,\r\n            openInstances = [],\r\n            classes = defaults.notifier.classes,\r\n            baseClass = classes.base;\r\n        /**\r\n         * Helper: initializes the notifier instance\r\n         *\r\n         */\r\n        function initialize(instance) {\r\n\r\n            if (!instance.__internal) {\r\n                instance.__internal = {\r\n                    position: alertify.defaults.notifier.position,\r\n                    delay: alertify.defaults.notifier.delay,\r\n                };\r\n\r\n                element = document.createElement('DIV');\r\n                var transitionOff = 'transitionOff' in defaults.notifier ? defaults.notifier.transitionOff : defaults.transitionOff;\r\n                if(transitionOff){\r\n                    baseClass = classes.base + ' ajs-no-transition';\r\n                }\r\n                updatePosition(instance);\r\n            }\r\n\r\n            //add to DOM tree.\r\n            if (element.parentNode !== document.body) {\r\n                document.body.appendChild(element);\r\n            }\r\n        }\r\n\r\n        function pushInstance(instance) {\r\n            instance.__internal.pushed = true;\r\n            openInstances.push(instance);\r\n        }\r\n        function popInstance(instance) {\r\n            openInstances.splice(openInstances.indexOf(instance), 1);\r\n            instance.__internal.pushed = false;\r\n        }\r\n        /**\r\n         * Helper: update the notifier instance position\r\n         *\r\n         */\r\n        function updatePosition(instance) {\r\n            element.className = baseClass;\r\n            switch (instance.__internal.position) {\r\n            case 'top-right':\r\n                addClass(element, classes.top + ' ' + classes.right);\r\n                break;\r\n            case 'top-left':\r\n                addClass(element, classes.top + ' ' + classes.left);\r\n                break;\r\n            case 'top-center':\r\n                addClass(element, classes.top + ' ' + classes.center);\r\n                break;\r\n            case 'bottom-left':\r\n                addClass(element, classes.bottom + ' ' + classes.left);\r\n                break;\r\n            case 'bottom-center':\r\n                addClass(element, classes.bottom + ' ' + classes.center);\r\n                break;\r\n\r\n            default:\r\n            case 'bottom-right':\r\n                addClass(element, classes.bottom + ' ' + classes.right);\r\n                break;\r\n            }\r\n        }\r\n\r\n        /**\r\n        * creates a new notification message\r\n        *\r\n        * @param  {DOMElement} message\tThe notifier message element\r\n        * @param  {Number} wait   Time (in ms) to wait before the message is dismissed, a value of 0 means keep open till clicked.\r\n        * @param  {Function} callback A callback function to be invoked when the message is dismissed.\r\n        *\r\n        * @return {undefined}\r\n        */\r\n        function create(div, callback) {\r\n\r\n            function clickDelegate(event, instance) {\r\n                if(!instance.__internal.closeButton || event.target.getAttribute('data-close') === 'true'){\r\n                    instance.dismiss(true);\r\n                }\r\n            }\r\n\r\n            function transitionDone(event, instance) {\r\n                // unbind event\r\n                off(instance.element, transition.type, transitionDone);\r\n                // remove the message\r\n                element.removeChild(instance.element);\r\n            }\r\n\r\n            function initialize(instance) {\r\n                if (!instance.__internal) {\r\n                    instance.__internal = {\r\n                        pushed: false,\r\n                        delay : undefined,\r\n                        timer: undefined,\r\n                        clickHandler: undefined,\r\n                        transitionEndHandler: undefined,\r\n                        transitionTimeout: undefined\r\n                    };\r\n                    instance.__internal.clickHandler = delegate(instance, clickDelegate);\r\n                    instance.__internal.transitionEndHandler = delegate(instance, transitionDone);\r\n                }\r\n                return instance;\r\n            }\r\n            function clearTimers(instance) {\r\n                clearTimeout(instance.__internal.timer);\r\n                clearTimeout(instance.__internal.transitionTimeout);\r\n            }\r\n            return initialize({\r\n                /* notification DOM element*/\r\n                element: div,\r\n                /*\r\n                 * Pushes a notification message\r\n                 * @param {string or DOMElement} content The notification message content\r\n                 * @param {Number} wait The time (in seconds) to wait before the message is dismissed, a value of 0 means keep open till clicked.\r\n                 *\r\n                 */\r\n                push: function (_content, _wait) {\r\n                    if (!this.__internal.pushed) {\r\n\r\n                        pushInstance(this);\r\n                        clearTimers(this);\r\n\r\n                        var content, wait;\r\n                        switch (arguments.length) {\r\n                        case 0:\r\n                            wait = this.__internal.delay;\r\n                            break;\r\n                        case 1:\r\n                            if (typeof (_content) === 'number') {\r\n                                wait = _content;\r\n                            } else {\r\n                                content = _content;\r\n                                wait = this.__internal.delay;\r\n                            }\r\n                            break;\r\n                        case 2:\r\n                            content = _content;\r\n                            wait = _wait;\r\n                            break;\r\n                        }\r\n                        this.__internal.closeButton = alertify.defaults.notifier.closeButton;\r\n                        // set contents\r\n                        if (typeof content !== 'undefined') {\r\n                            this.setContent(content);\r\n                        }\r\n                        // append or insert\r\n                        if (notifier.__internal.position.indexOf('top') < 0) {\r\n                            element.appendChild(this.element);\r\n                        } else {\r\n                            element.insertBefore(this.element, element.firstChild);\r\n                        }\r\n                        reflow = this.element.offsetWidth;\r\n                        addClass(this.element, classes.visible);\r\n                        // attach click event\r\n                        on(this.element, 'click', this.__internal.clickHandler);\r\n                        return this.delay(wait);\r\n                    }\r\n                    return this;\r\n                },\r\n                /*\r\n                 * {Function} callback function to be invoked before dismissing the notification message.\r\n                 * Remarks: A return value === 'false' will cancel the dismissal\r\n                 *\r\n                 */\r\n                ondismiss: function () { },\r\n                /*\r\n                 * {Function} callback function to be invoked when the message is dismissed.\r\n                 *\r\n                 */\r\n                callback: callback,\r\n                /*\r\n                 * Dismisses the notification message\r\n                 * @param {Boolean} clicked A flag indicating if the dismissal was caused by a click.\r\n                 *\r\n                 */\r\n                dismiss: function (clicked) {\r\n                    if (this.__internal.pushed) {\r\n                        clearTimers(this);\r\n                        if (!(typeof this.ondismiss === 'function' && this.ondismiss.call(this) === false)) {\r\n                            //detach click event\r\n                            off(this.element, 'click', this.__internal.clickHandler);\r\n                            // ensure element exists\r\n                            if (typeof this.element !== 'undefined' && this.element.parentNode === element) {\r\n                                //transition end or fallback\r\n                                this.__internal.transitionTimeout = setTimeout(this.__internal.transitionEndHandler, transition.supported ? 1000 : 100);\r\n                                removeClass(this.element, classes.visible);\r\n\r\n                                // custom callback on dismiss\r\n                                if (typeof this.callback === 'function') {\r\n                                    this.callback.call(this, clicked);\r\n                                }\r\n                            }\r\n                            popInstance(this);\r\n                        }\r\n                    }\r\n                    return this;\r\n                },\r\n                /*\r\n                 * Delays the notification message dismissal\r\n                 * @param {Number} wait The time (in seconds) to wait before the message is dismissed, a value of 0 means keep open till clicked.\r\n                 *\r\n                 */\r\n                delay: function (wait) {\r\n                    clearTimers(this);\r\n                    this.__internal.delay = typeof wait !== 'undefined' && !isNaN(+wait) ? +wait : notifier.__internal.delay;\r\n                    if (this.__internal.delay > 0) {\r\n                        var  self = this;\r\n                        this.__internal.timer = setTimeout(function () { self.dismiss(); }, this.__internal.delay * 1000);\r\n                    }\r\n                    return this;\r\n                },\r\n                /*\r\n                 * Sets the notification message contents\r\n                 * @param {string or DOMElement} content The notification message content\r\n                 *\r\n                 */\r\n                setContent: function (content) {\r\n                    if (isString(content)) {\r\n                        clearContents(this.element);\r\n                        this.element.innerHTML = content;\r\n                    } else if (content instanceof window.HTMLElement && this.element.firstChild !== content) {\r\n                        clearContents(this.element);\r\n                        this.element.appendChild(content);\r\n                    }\r\n                    if(this.__internal.closeButton){\r\n                        var close = document.createElement('span');\r\n                        addClass(close, classes.close);\r\n                        close.setAttribute('data-close', true);\r\n                        this.element.appendChild(close);\r\n                    }\r\n                    return this;\r\n                },\r\n                /*\r\n                 * Dismisses all open notifications except this.\r\n                 *\r\n                 */\r\n                dismissOthers: function () {\r\n                    notifier.dismissAll(this);\r\n                    return this;\r\n                }\r\n            });\r\n        }\r\n\r\n        //notifier api\r\n        return {\r\n            /**\r\n             * Gets or Sets notifier settings.\r\n             *\r\n             * @param {string} key The setting name\r\n             * @param {Variant} value The setting value.\r\n             *\r\n             * @return {Object}\tif the called as a setter, return the notifier instance.\r\n             */\r\n            setting: function (key, value) {\r\n                //ensure init\r\n                initialize(this);\r\n\r\n                if (typeof value === 'undefined') {\r\n                    //get\r\n                    return this.__internal[key];\r\n                } else {\r\n                    //set\r\n                    switch (key) {\r\n                    case 'position':\r\n                        this.__internal.position = value;\r\n                        updatePosition(this);\r\n                        break;\r\n                    case 'delay':\r\n                        this.__internal.delay = value;\r\n                        break;\r\n                    }\r\n                }\r\n                return this;\r\n            },\r\n            /**\r\n             * [Alias] Sets dialog settings/options\r\n             */\r\n            set:function(key,value){\r\n                this.setting(key,value);\r\n                return this;\r\n            },\r\n            /**\r\n             * [Alias] Gets dialog settings/options\r\n             */\r\n            get:function(key){\r\n                return this.setting(key);\r\n            },\r\n            /**\r\n             * Creates a new notification message\r\n             *\r\n             * @param {string} type The type of notification message (simply a CSS class name 'ajs-{type}' to be added).\r\n             * @param {Function} callback  A callback function to be invoked when the message is dismissed.\r\n             *\r\n             * @return {undefined}\r\n             */\r\n            create: function (type, callback) {\r\n                //ensure notifier init\r\n                initialize(this);\r\n                //create new notification message\r\n                var div = document.createElement('div');\r\n                div.className = classes.message + ((typeof type === 'string' && type !== '') ? ' ' + classes.prefix + type : '');\r\n                return create(div, callback);\r\n            },\r\n            /**\r\n             * Dismisses all open notifications.\r\n             *\r\n             * @param {Object} excpet [optional] The notification object to exclude from dismissal.\r\n             *\r\n             */\r\n            dismissAll: function (except) {\r\n                var clone = openInstances.slice(0);\r\n                for (var x = 0; x < clone.length; x += 1) {\r\n                    var  instance = clone[x];\r\n                    if (except === undefined || except !== instance) {\r\n                        instance.dismiss();\r\n                    }\r\n                }\r\n            }\r\n        };\r\n    })();\r\n\r\n    /**\r\n     * Alertify public API\r\n     * This contains everything that is exposed through the alertify object.\r\n     *\r\n     * @return {Object}\r\n     */\r\n    function Alertify() {\r\n\r\n        // holds a references of created dialogs\r\n        var dialogs = {};\r\n\r\n        /**\r\n         * Extends a given prototype by merging properties from base into sub.\r\n         *\r\n         * @sub {Object} sub The prototype being overwritten.\r\n         * @base {Object} base The prototype being written.\r\n         *\r\n         * @return {Object} The extended prototype.\r\n         */\r\n        function extend(sub, base) {\r\n            // copy dialog pototype over definition.\r\n            for (var prop in base) {\r\n                if (base.hasOwnProperty(prop)) {\r\n                    sub[prop] = base[prop];\r\n                }\r\n            }\r\n            return sub;\r\n        }\r\n\r\n\r\n        /**\r\n        * Helper: returns a dialog instance from saved dialogs.\r\n        * and initializes the dialog if its not already initialized.\r\n        *\r\n        * @name {String} name The dialog name.\r\n        *\r\n        * @return {Object} The dialog instance.\r\n        */\r\n        function get_dialog(name) {\r\n            var dialog = dialogs[name].dialog;\r\n            //initialize the dialog if its not already initialized.\r\n            if (dialog && typeof dialog.__init === 'function') {\r\n                dialog.__init(dialog);\r\n            }\r\n            return dialog;\r\n        }\r\n\r\n        /**\r\n         * Helper:  registers a new dialog definition.\r\n         *\r\n         * @name {String} name The dialog name.\r\n         * @Factory {Function} Factory a function resposible for creating dialog prototype.\r\n         * @transient {Boolean} transient True to create a new dialog instance each time the dialog is invoked, false otherwise.\r\n         * @base {String} base the name of another dialog to inherit from.\r\n         *\r\n         * @return {Object} The dialog definition.\r\n         */\r\n        function register(name, Factory, transient, base) {\r\n            var definition = {\r\n                dialog: null,\r\n                factory: Factory\r\n            };\r\n\r\n            //if this is based on an existing dialog, create a new definition\r\n            //by applying the new protoype over the existing one.\r\n            if (base !== undefined) {\r\n                definition.factory = function () {\r\n                    return extend(new dialogs[base].factory(), new Factory());\r\n                };\r\n            }\r\n\r\n            if (!transient) {\r\n                //create a new definition based on dialog\r\n                definition.dialog = extend(new definition.factory(), dialog);\r\n            }\r\n            return dialogs[name] = definition;\r\n        }\r\n\r\n        return {\r\n            /**\r\n             * Alertify defaults\r\n             * \r\n             * @type {Object}\r\n             */\r\n            defaults: defaults,\r\n            /**\r\n             * Dialogs factory \r\n             *\r\n             * @param {string}      Dialog name.\r\n             * @param {Function}    A Dialog factory function.\r\n             * @param {Boolean}     Indicates whether to create a singleton or transient dialog.\r\n             * @param {String}      The name of the base type to inherit from.\r\n             */\r\n            dialog: function (name, Factory, transient, base) {\r\n\r\n                // get request, create a new instance and return it.\r\n                if (typeof Factory !== 'function') {\r\n                    return get_dialog(name);\r\n                }\r\n\r\n                if (this.hasOwnProperty(name)) {\r\n                    throw new Error('alertify.dialog: name already exists');\r\n                }\r\n\r\n                // register the dialog\r\n                var definition = register(name, Factory, transient, base);\r\n\r\n                if (transient) {\r\n\r\n                    // make it public\r\n                    this[name] = function () {\r\n                        //if passed with no params, consider it a get request\r\n                        if (arguments.length === 0) {\r\n                            return definition.dialog;\r\n                        } else {\r\n                            var instance = extend(new definition.factory(), dialog);\r\n                            //ensure init\r\n                            if (instance && typeof instance.__init === 'function') {\r\n                                instance.__init(instance);\r\n                            }\r\n                            instance['main'].apply(instance, arguments);\r\n                            return instance['show'].apply(instance);\r\n                        }\r\n                    };\r\n                } else {\r\n                    // make it public\r\n                    this[name] = function () {\r\n                        //ensure init\r\n                        if (definition.dialog && typeof definition.dialog.__init === 'function') {\r\n                            definition.dialog.__init(definition.dialog);\r\n                        }\r\n                        //if passed with no params, consider it a get request\r\n                        if (arguments.length === 0) {\r\n                            return definition.dialog;\r\n                        } else {\r\n                            var dialog = definition.dialog;\r\n                            dialog['main'].apply(definition.dialog, arguments);\r\n                            return dialog['show'].apply(definition.dialog);\r\n                        }\r\n                    };\r\n                }\r\n            },\r\n            /**\r\n             * Close all open dialogs.\r\n             *\r\n             * @param {Object} excpet [optional] The dialog object to exclude from closing.\r\n             *\r\n             * @return {undefined}\r\n             */\r\n            closeAll: function (except) {\r\n                var clone = openDialogs.slice(0);\r\n                for (var x = 0; x < clone.length; x += 1) {\r\n                    var instance = clone[x];\r\n                    if (except === undefined || except !== instance) {\r\n                        instance.close();\r\n                    }\r\n                }\r\n            },\r\n            /**\r\n             * Gets or Sets dialog settings/options. if the dialog is transient, this call does nothing.\r\n             *\r\n             * @param {string} name The dialog name.\r\n             * @param {String|Object} key A string specifying a propery name or a collection of key/value pairs.\r\n             * @param {Variant} value Optional, the value associated with the key (in case it was a string).\r\n             *\r\n             * @return {undefined}\r\n             */\r\n            setting: function (name, key, value) {\r\n\r\n                if (name === 'notifier') {\r\n                    return notifier.setting(key, value);\r\n                }\r\n\r\n                var dialog = get_dialog(name);\r\n                if (dialog) {\r\n                    return dialog.setting(key, value);\r\n                }\r\n            },\r\n            /**\r\n             * [Alias] Sets dialog settings/options \r\n             */\r\n            set: function(name,key,value){\r\n                return this.setting(name, key,value);\r\n            },\r\n            /**\r\n             * [Alias] Gets dialog settings/options \r\n             */\r\n            get: function(name, key){\r\n                return this.setting(name, key);\r\n            },\r\n            /**\r\n             * Creates a new notification message.\r\n             * If a type is passed, a class name \"ajs-{type}\" will be added.\r\n             * This allows for custom look and feel for various types of notifications.\r\n             *\r\n             * @param  {String | DOMElement}    [message=undefined]\t\tMessage text\r\n             * @param  {String}                 [type='']\t\t\t\tType of log message\r\n             * @param  {String}                 [wait='']\t\t\t\tTime (in seconds) to wait before auto-close\r\n             * @param  {Function}               [callback=undefined]\tA callback function to be invoked when the log is closed.\r\n             *\r\n             * @return {Object} Notification object.\r\n             */\r\n            notify: function (message, type, wait, callback) {\r\n                return notifier.create(type, callback).push(message, wait);\r\n            },\r\n            /**\r\n             * Creates a new notification message.\r\n             *\r\n             * @param  {String}\t\t[message=undefined]\t\tMessage text\r\n             * @param  {String}     [wait='']\t\t\t\tTime (in seconds) to wait before auto-close\r\n             * @param  {Function}\t[callback=undefined]\tA callback function to be invoked when the log is closed.\r\n             *\r\n             * @return {Object} Notification object.\r\n             */\r\n            message: function (message, wait, callback) {\r\n                return notifier.create(null, callback).push(message, wait);\r\n            },\r\n            /**\r\n             * Creates a new notification message of type 'success'.\r\n             *\r\n             * @param  {String}\t\t[message=undefined]\t\tMessage text\r\n             * @param  {String}     [wait='']\t\t\t\tTime (in seconds) to wait before auto-close\r\n             * @param  {Function}\t[callback=undefined]\tA callback function to be invoked when the log is closed.\r\n             *\r\n             * @return {Object} Notification object.\r\n             */\r\n            success: function (message, wait, callback) {\r\n                return notifier.create('success', callback).push(message, wait);\r\n            },\r\n            /**\r\n             * Creates a new notification message of type 'error'.\r\n             *\r\n             * @param  {String}\t\t[message=undefined]\t\tMessage text\r\n             * @param  {String}     [wait='']\t\t\t\tTime (in seconds) to wait before auto-close\r\n             * @param  {Function}\t[callback=undefined]\tA callback function to be invoked when the log is closed.\r\n             *\r\n             * @return {Object} Notification object.\r\n             */\r\n            error: function (message, wait, callback) {\r\n                return notifier.create('error', callback).push(message, wait);\r\n            },\r\n            /**\r\n             * Creates a new notification message of type 'warning'.\r\n             *\r\n             * @param  {String}\t\t[message=undefined]\t\tMessage text\r\n             * @param  {String}     [wait='']\t\t\t\tTime (in seconds) to wait before auto-close\r\n             * @param  {Function}\t[callback=undefined]\tA callback function to be invoked when the log is closed.\r\n             *\r\n             * @return {Object} Notification object.\r\n             */\r\n            warning: function (message, wait, callback) {\r\n                return notifier.create('warning', callback).push(message, wait);\r\n            },\r\n            /**\r\n             * Dismisses all open notifications\r\n             *\r\n             * @return {undefined}\r\n             */\r\n            dismissAll: function () {\r\n                notifier.dismissAll();\r\n            }\r\n        };\r\n    }\r\n    var alertify = new Alertify();\r\n\r\n    /**\r\n    * Alert dialog definition\r\n    *\r\n    * invoked by:\r\n    *\talertify.alert(message);\r\n    *\talertify.alert(title, message);\r\n    *\talertify.alert(message, onok);\r\n    *\talertify.alert(title, message, onok);\r\n     */\r\n    alertify.dialog('alert', function () {\r\n        return {\r\n            main: function (_title, _message, _onok) {\r\n                var title, message, onok;\r\n                switch (arguments.length) {\r\n                case 1:\r\n                    message = _title;\r\n                    break;\r\n                case 2:\r\n                    if (typeof _message === 'function') {\r\n                        message = _title;\r\n                        onok = _message;\r\n                    } else {\r\n                        title = _title;\r\n                        message = _message;\r\n                    }\r\n                    break;\r\n                case 3:\r\n                    title = _title;\r\n                    message = _message;\r\n                    onok = _onok;\r\n                    break;\r\n                }\r\n                this.set('title', title);\r\n                this.set('message', message);\r\n                this.set('onok', onok);\r\n                return this;\r\n            },\r\n            setup: function () {\r\n                return {\r\n                    buttons: [\r\n                        {\r\n                            text: alertify.defaults.glossary.ok,\r\n                            key: keys.ESC,\r\n                            invokeOnClose: true,\r\n                            className: alertify.defaults.theme.ok,\r\n                        }\r\n                    ],\r\n                    focus: {\r\n                        element: 0,\r\n                        select: false\r\n                    },\r\n                    options: {\r\n                        maximizable: false,\r\n                        resizable: false\r\n                    }\r\n                };\r\n            },\r\n            build: function () {\r\n                // nothing\r\n            },\r\n            prepare: function () {\r\n                //nothing\r\n            },\r\n            setMessage: function (message) {\r\n                this.setContent(message);\r\n            },\r\n            settings: {\r\n                message: undefined,\r\n                onok: undefined,\r\n                label: undefined,\r\n            },\r\n            settingUpdated: function (key, oldValue, newValue) {\r\n                switch (key) {\r\n                case 'message':\r\n                    this.setMessage(newValue);\r\n                    break;\r\n                case 'label':\r\n                    if (this.__internal.buttons[0].element) {\r\n                        this.__internal.buttons[0].element.innerHTML = newValue;\r\n                    }\r\n                    break;\r\n                }\r\n            },\r\n            callback: function (closeEvent) {\r\n                if (typeof this.get('onok') === 'function') {\r\n                    var returnValue = this.get('onok').call(this, closeEvent);\r\n                    if (typeof returnValue !== 'undefined') {\r\n                        closeEvent.cancel = !returnValue;\r\n                    }\r\n                }\r\n            }\r\n        };\r\n    });\r\n    /**\r\n     * Confirm dialog object\r\n     *\r\n     *\talertify.confirm(message);\r\n     *\talertify.confirm(message, onok);\r\n     *\talertify.confirm(message, onok, oncancel);\r\n     *\talertify.confirm(title, message, onok, oncancel);\r\n     */\r\n    alertify.dialog('confirm', function () {\r\n\r\n        var autoConfirm = {\r\n            timer: null,\r\n            index: null,\r\n            text: null,\r\n            duration: null,\r\n            task: function (event, self) {\r\n                if (self.isOpen()) {\r\n                    self.__internal.buttons[autoConfirm.index].element.innerHTML = autoConfirm.text + ' (&#8207;' + autoConfirm.duration + '&#8207;) ';\r\n                    autoConfirm.duration -= 1;\r\n                    if (autoConfirm.duration === -1) {\r\n                        clearAutoConfirm(self);\r\n                        var button = self.__internal.buttons[autoConfirm.index];\r\n                        var closeEvent = createCloseEvent(autoConfirm.index, button);\r\n\r\n                        if (typeof self.callback === 'function') {\r\n                            self.callback.apply(self, [closeEvent]);\r\n                        }\r\n                        //close the dialog.\r\n                        if (closeEvent.close !== false) {\r\n                            self.close();\r\n                        }\r\n                    }\r\n                } else {\r\n                    clearAutoConfirm(self);\r\n                }\r\n            }\r\n        };\r\n\r\n        function clearAutoConfirm(self) {\r\n            if (autoConfirm.timer !== null) {\r\n                clearInterval(autoConfirm.timer);\r\n                autoConfirm.timer = null;\r\n                self.__internal.buttons[autoConfirm.index].element.innerHTML = autoConfirm.text;\r\n            }\r\n        }\r\n\r\n        function startAutoConfirm(self, index, duration) {\r\n            clearAutoConfirm(self);\r\n            autoConfirm.duration = duration;\r\n            autoConfirm.index = index;\r\n            autoConfirm.text = self.__internal.buttons[index].element.innerHTML;\r\n            autoConfirm.timer = setInterval(delegate(self, autoConfirm.task), 1000);\r\n            autoConfirm.task(null, self);\r\n        }\r\n\r\n\r\n        return {\r\n            main: function (_title, _message, _onok, _oncancel) {\r\n                var title, message, onok, oncancel;\r\n                switch (arguments.length) {\r\n                case 1:\r\n                    message = _title;\r\n                    break;\r\n                case 2:\r\n                    message = _title;\r\n                    onok = _message;\r\n                    break;\r\n                case 3:\r\n                    message = _title;\r\n                    onok = _message;\r\n                    oncancel = _onok;\r\n                    break;\r\n                case 4:\r\n                    title = _title;\r\n                    message = _message;\r\n                    onok = _onok;\r\n                    oncancel = _oncancel;\r\n                    break;\r\n                }\r\n                this.set('title', title);\r\n                this.set('message', message);\r\n                this.set('onok', onok);\r\n                this.set('oncancel', oncancel);\r\n                return this;\r\n            },\r\n            setup: function () {\r\n                return {\r\n                    buttons: [\r\n                        {\r\n                            text: alertify.defaults.glossary.ok,\r\n                            key: keys.ENTER,\r\n                            className: alertify.defaults.theme.ok,\r\n                        },\r\n                        {\r\n                            text: alertify.defaults.glossary.cancel,\r\n                            key: keys.ESC,\r\n                            invokeOnClose: true,\r\n                            className: alertify.defaults.theme.cancel,\r\n                        }\r\n                    ],\r\n                    focus: {\r\n                        element: 0,\r\n                        select: false\r\n                    },\r\n                    options: {\r\n                        maximizable: false,\r\n                        resizable: false\r\n                    }\r\n                };\r\n            },\r\n            build: function () {\r\n                //nothing\r\n            },\r\n            prepare: function () {\r\n                //nothing\r\n            },\r\n            setMessage: function (message) {\r\n                this.setContent(message);\r\n            },\r\n            settings: {\r\n                message: null,\r\n                labels: null,\r\n                onok: null,\r\n                oncancel: null,\r\n                defaultFocus: null,\r\n                reverseButtons: null,\r\n            },\r\n            settingUpdated: function (key, oldValue, newValue) {\r\n                switch (key) {\r\n                case 'message':\r\n                    this.setMessage(newValue);\r\n                    break;\r\n                case 'labels':\r\n                    if ('ok' in newValue && this.__internal.buttons[0].element) {\r\n                        this.__internal.buttons[0].text = newValue.ok;\r\n                        this.__internal.buttons[0].element.innerHTML = newValue.ok;\r\n                    }\r\n                    if ('cancel' in newValue && this.__internal.buttons[1].element) {\r\n                        this.__internal.buttons[1].text = newValue.cancel;\r\n                        this.__internal.buttons[1].element.innerHTML = newValue.cancel;\r\n                    }\r\n                    break;\r\n                case 'reverseButtons':\r\n                    if (newValue === true) {\r\n                        this.elements.buttons.primary.appendChild(this.__internal.buttons[0].element);\r\n                    } else {\r\n                        this.elements.buttons.primary.appendChild(this.__internal.buttons[1].element);\r\n                    }\r\n                    break;\r\n                case 'defaultFocus':\r\n                    this.__internal.focus.element = newValue === 'ok' ? 0 : 1;\r\n                    break;\r\n                }\r\n            },\r\n            callback: function (closeEvent) {\r\n                clearAutoConfirm(this);\r\n                var returnValue;\r\n                switch (closeEvent.index) {\r\n                case 0:\r\n                    if (typeof this.get('onok') === 'function') {\r\n                        returnValue = this.get('onok').call(this, closeEvent);\r\n                        if (typeof returnValue !== 'undefined') {\r\n                            closeEvent.cancel = !returnValue;\r\n                        }\r\n                    }\r\n                    break;\r\n                case 1:\r\n                    if (typeof this.get('oncancel') === 'function') {\r\n                        returnValue = this.get('oncancel').call(this, closeEvent);\r\n                        if (typeof returnValue !== 'undefined') {\r\n                            closeEvent.cancel = !returnValue;\r\n                        }\r\n                    }\r\n                    break;\r\n                }\r\n            },\r\n            autoOk: function (duration) {\r\n                startAutoConfirm(this, 0, duration);\r\n                return this;\r\n            },\r\n            autoCancel: function (duration) {\r\n                startAutoConfirm(this, 1, duration);\r\n                return this;\r\n            }\r\n        };\r\n    });\r\n    /**\r\n     * Prompt dialog object\r\n     *\r\n     * invoked by:\r\n     *\talertify.prompt(message);\r\n     *\talertify.prompt(message, value);\r\n     *\talertify.prompt(message, value, onok);\r\n     *\talertify.prompt(message, value, onok, oncancel);\r\n     *\talertify.prompt(title, message, value, onok, oncancel);\r\n     */\r\n    alertify.dialog('prompt', function () {\r\n        var input = document.createElement('INPUT');\r\n        var p = document.createElement('P');\r\n        return {\r\n            main: function (_title, _message, _value, _onok, _oncancel) {\r\n                var title, message, value, onok, oncancel;\r\n                switch (arguments.length) {\r\n                case 1:\r\n                    message = _title;\r\n                    break;\r\n                case 2:\r\n                    message = _title;\r\n                    value = _message;\r\n                    break;\r\n                case 3:\r\n                    message = _title;\r\n                    value = _message;\r\n                    onok = _value;\r\n                    break;\r\n                case 4:\r\n                    message = _title;\r\n                    value = _message;\r\n                    onok = _value;\r\n                    oncancel = _onok;\r\n                    break;\r\n                case 5:\r\n                    title = _title;\r\n                    message = _message;\r\n                    value = _value;\r\n                    onok = _onok;\r\n                    oncancel = _oncancel;\r\n                    break;\r\n                }\r\n                this.set('title', title);\r\n                this.set('message', message);\r\n                this.set('value', value);\r\n                this.set('onok', onok);\r\n                this.set('oncancel', oncancel);\r\n                return this;\r\n            },\r\n            setup: function () {\r\n                return {\r\n                    buttons: [\r\n                        {\r\n                            text: alertify.defaults.glossary.ok,\r\n                            key: keys.ENTER,\r\n                            className: alertify.defaults.theme.ok,\r\n                        },\r\n                        {\r\n                            text: alertify.defaults.glossary.cancel,\r\n                            key: keys.ESC,\r\n                            invokeOnClose: true,\r\n                            className: alertify.defaults.theme.cancel,\r\n                        }\r\n                    ],\r\n                    focus: {\r\n                        element: input,\r\n                        select: true\r\n                    },\r\n                    options: {\r\n                        maximizable: false,\r\n                        resizable: false\r\n                    }\r\n                };\r\n            },\r\n            build: function () {\r\n                input.className = alertify.defaults.theme.input;\r\n                input.setAttribute('type', 'text');\r\n                input.value = this.get('value');\r\n                this.elements.content.appendChild(p);\r\n                this.elements.content.appendChild(input);\r\n            },\r\n            prepare: function () {\r\n                //nothing\r\n            },\r\n            setMessage: function (message) {\r\n                if (isString(message)) {\r\n                    clearContents(p);\r\n                    p.innerHTML = message;\r\n                } else if (message instanceof window.HTMLElement && p.firstChild !== message) {\r\n                    clearContents(p);\r\n                    p.appendChild(message);\r\n                }\r\n            },\r\n            settings: {\r\n                message: undefined,\r\n                labels: undefined,\r\n                onok: undefined,\r\n                oncancel: undefined,\r\n                value: '',\r\n                type:'text',\r\n                reverseButtons: undefined,\r\n            },\r\n            settingUpdated: function (key, oldValue, newValue) {\r\n                switch (key) {\r\n                case 'message':\r\n                    this.setMessage(newValue);\r\n                    break;\r\n                case 'value':\r\n                    input.value = newValue;\r\n                    break;\r\n                case 'type':\r\n                    switch (newValue) {\r\n                    case 'text':\r\n                    case 'color':\r\n                    case 'date':\r\n                    case 'datetime-local':\r\n                    case 'email':\r\n                    case 'month':\r\n                    case 'number':\r\n                    case 'password':\r\n                    case 'search':\r\n                    case 'tel':\r\n                    case 'time':\r\n                    case 'week':\r\n                        input.type = newValue;\r\n                        break;\r\n                    default:\r\n                        input.type = 'text';\r\n                        break;\r\n                    }\r\n                    break;\r\n                case 'labels':\r\n                    if (newValue.ok && this.__internal.buttons[0].element) {\r\n                        this.__internal.buttons[0].element.innerHTML = newValue.ok;\r\n                    }\r\n                    if (newValue.cancel && this.__internal.buttons[1].element) {\r\n                        this.__internal.buttons[1].element.innerHTML = newValue.cancel;\r\n                    }\r\n                    break;\r\n                case 'reverseButtons':\r\n                    if (newValue === true) {\r\n                        this.elements.buttons.primary.appendChild(this.__internal.buttons[0].element);\r\n                    } else {\r\n                        this.elements.buttons.primary.appendChild(this.__internal.buttons[1].element);\r\n                    }\r\n                    break;\r\n                }\r\n            },\r\n            callback: function (closeEvent) {\r\n                var returnValue;\r\n                switch (closeEvent.index) {\r\n                case 0:\r\n                    this.settings.value = input.value;\r\n                    if (typeof this.get('onok') === 'function') {\r\n                        returnValue = this.get('onok').call(this, closeEvent, this.settings.value);\r\n                        if (typeof returnValue !== 'undefined') {\r\n                            closeEvent.cancel = !returnValue;\r\n                        }\r\n                    }\r\n                    break;\r\n                case 1:\r\n                    if (typeof this.get('oncancel') === 'function') {\r\n                        returnValue = this.get('oncancel').call(this, closeEvent);\r\n                        if (typeof returnValue !== 'undefined') {\r\n                            closeEvent.cancel = !returnValue;\r\n                        }\r\n                    }\r\n                    if(!closeEvent.cancel){\r\n                        input.value = this.settings.value;\r\n                    }\r\n                    break;\r\n                }\r\n            }\r\n        };\r\n    });\r\n\r\n    // CommonJS\r\n    if ( typeof module === 'object' && typeof module.exports === 'object' ) {\r\n        module.exports = alertify;\r\n    // AMD\r\n    } else if ( typeof define === 'function' && define.amd) {\r\n        define( [], function () {\r\n            return alertify;\r\n        } );\r\n    // window\r\n    } else if ( !window.alertify ) {\r\n        window.alertify = alertify;\r\n    }\r\n\r\n} ( typeof window !== 'undefined' ? window : this ) );\r\n"],
  "mappings": "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",
  "names": ["window", "top", "initialize", "dialog"]
}
